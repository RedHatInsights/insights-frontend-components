// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Form renderer should render array schema correctly 1`] = `
<FormRenderer
  onSubmit={[MockFunction]}
  schema={
    Object {
      "definitions": Object {
        "Thing": Object {
          "properties": Object {
            "name": Object {
              "default": "Default name",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "properties": Object {
        "defaultsAndMinItems": Object {
          "default": Array [
            "carp",
            "trout",
            "bream",
          ],
          "items": Object {
            "default": "unidentified",
            "type": "string",
          },
          "minItems": 5,
          "title": "List and item level defaults",
          "type": "array",
        },
        "fixedItemsList": Object {
          "additionalItems": Object {
            "title": "Additional item",
            "type": "number",
          },
          "items": Array [
            Object {
              "default": "lorem ipsum",
              "title": "A string value",
              "type": "string",
            },
            Object {
              "title": "a boolean value",
              "type": "boolean",
            },
          ],
          "title": "A list of fixed items",
          "type": "array",
        },
        "fixedNoToolbar": Object {
          "additionalItems": Object {
            "default": "lorem ipsum",
            "title": "A string",
            "type": "string",
          },
          "items": Array [
            Object {
              "default": 42,
              "title": "A number",
              "type": "number",
            },
            Object {
              "default": false,
              "title": "A boolean",
              "type": "boolean",
            },
          ],
          "title": "Fixed array without buttons",
          "type": "array",
        },
        "listOfStrings": Object {
          "items": Object {
            "default": "bazinga",
            "type": "string",
          },
          "title": "A list of strings",
          "type": "array",
        },
        "minItemsList": Object {
          "items": Object {},
          "minItems": 3,
          "title": "A list with a minimal number of items",
          "type": "array",
        },
        "multipleChoicesList": Object {
          "items": Object {
            "enum": Array [
              "foo",
              "bar",
              "fuzz",
              "qux",
            ],
            "type": "string",
          },
          "title": "A multiple choices list",
          "type": "array",
          "uniqueItems": true,
        },
        "nestedList": Object {
          "items": Object {
            "items": Object {
              "default": "lorem ipsum",
              "type": "string",
            },
            "title": "Inner list",
            "type": "array",
          },
          "title": "Nested list",
          "type": "array",
        },
        "noToolbar": Object {
          "items": Object {
            "default": "lorem ipsum",
            "type": "string",
          },
          "title": "No add, remove and order buttons",
          "type": "array",
        },
        "unorderable": Object {
          "items": Object {
            "default": "lorem ipsum",
            "type": "string",
          },
          "title": "Unorderable items",
          "type": "array",
        },
        "unremovable": Object {
          "items": Object {
            "default": "lorem ipsum",
            "type": "string",
          },
          "title": "Unremovable items",
          "type": "array",
        },
      },
      "type": "object",
    }
  }
  uiSchema={
    Object {
      "fixedItemsList": Object {
        "additionalItems": Object {
          "ui:widget": "updown",
        },
        "items": Array [
          Object {
            "ui:widget": "textarea",
          },
          Object {
            "ui:widget": "select",
          },
        ],
      },
      "fixedNoToolbar": Object {
        "ui:options": Object {
          "addable": false,
          "orderable": false,
          "removable": false,
        },
      },
      "listOfStrings": Object {
        "items": Object {
          "ui:emptyValue": "",
        },
      },
      "multipleChoicesList": Object {
        "ui:widget": "checkboxes",
      },
      "noToolbar": Object {
        "ui:options": Object {
          "addable": false,
          "orderable": false,
          "removable": false,
        },
      },
      "unorderable": Object {
        "ui:options": Object {
          "orderable": false,
        },
      },
      "unremovable": Object {
        "ui:options": Object {
          "removable": false,
        },
      },
    }
  }
>
  <ReactFinalForm
    initialValues={
      Object {
        "defaultsAndMinItems": Array [
          "carp",
          "trout",
          "bream",
        ],
        "fixedItemsList": Object {
          "additionalItems": undefined,
        },
        "fixedNoToolbar": Object {
          "additionalItems": Object {
            "items": "lorem ipsum",
          },
        },
        "listOfStrings": undefined,
        "minItemsList": Object {
          "name": "Default name",
        },
        "nestedList": Array [
          undefined,
        ],
        "noToolbar": undefined,
        "unorderable": undefined,
        "unremovable": undefined,
      }
    }
    mutators={
      Object {
        "insert": [Function],
        "move": [Function],
        "pop": [Function],
        "push": [Function],
        "remove": [Function],
        "shift": [Function],
        "swap": [Function],
        "unshift": [Function],
        "update": [Function],
      }
    }
    onSubmit={[MockFunction]}
    render={[Function]}
    subscription={
      Object {
        "pristine": true,
        "submitting": true,
      }
    }
  >
    <Form
      className=""
      isHorizontal={false}
    >
      <form
        className="pf-c-form"
      >
        <Field
          format={[Function]}
          key="listOfStrings"
          name="listOfStrings"
          parse={[Function]}
          subscription={
            Object {
              "error": true,
              "pristine": true,
            }
          }
        >
          <DynamicArray
            fieldKey="listOfStrings"
            fields={
              Array [
                Object {
                  "autoFocus": false,
                  "component": "text-field",
                  "dataType": "string",
                  "default": Array [
                    "bazinga",
                  ],
                  "description": undefined,
                  "helperText": undefined,
                  "initialKey": "items",
                  "inline": undefined,
                  "isDisabled": undefined,
                  "isReadOnly": undefined,
                  "label": undefined,
                  "name": "listOfStrings.items",
                  "rows": undefined,
                  "type": "text",
                  "validate": Array [],
                },
              ]
            }
            itemDefault="bazinga"
            renderForm={[Function]}
            title="A list of strings"
            validate={[Function]}
          >
            <ReactFinalFormFieldArray(4.8.1)(1.0.6)
              key="listOfStrings"
              name="listOfStrings"
              validate={[Function]}
            >
              <Title
                className=""
                size="lg"
              >
                <h1
                  className="pf-c-title pf-m-lg"
                >
                  A list of strings
                </h1>
              </Title>
              <ActionGroup
                className=""
              >
                <div
                  className="pf-c-form__group pf-m-action"
                >
                  <ToolbarGroup
                    className="pf-u-display-flex pf-u-justify-content-flex-end"
                  >
                    <div
                      className="pf-l-toolbar__group pf-u-display-flex pf-u-justify-content-flex-end"
                    >
                      <ToolbarItem
                        className={null}
                      >
                        <div
                          className="pf-l-toolbar__item"
                        >
                          <Button
                            aria-label={null}
                            className=""
                            component="button"
                            isActive={false}
                            isBlock={false}
                            isDisabled={false}
                            isFocus={false}
                            isHover={false}
                            onClick={[Function]}
                            type="button"
                            variant="link"
                          >
                            <button
                              aria-disabled={null}
                              aria-label={null}
                              className="pf-c-button pf-m-link"
                              disabled={false}
                              onClick={[Function]}
                              tabIndex={null}
                              type="button"
                            >
                              <PlusIcon
                                color="currentColor"
                                size="sm"
                                title={null}
                              >
                                <svg
                                  aria-hidden={true}
                                  aria-labelledby={null}
                                  fill="currentColor"
                                  height="1em"
                                  role="img"
                                  viewBox="0 0 448 512"
                                  width="1em"
                                >
                                  <path
                                    d="M416 208H272V64c0-17.67-14.33-32-32-32h-32c-17.67 0-32 14.33-32 32v144H32c-17.67 0-32 14.33-32 32v32c0 17.67 14.33 32 32 32h144v144c0 17.67 14.33 32 32 32h32c17.67 0 32-14.33 32-32V304h144c17.67 0 32-14.33 32-32v-32c0-17.67-14.33-32-32-32z"
                                    transform=""
                                  />
                                </svg>
                              </PlusIcon>
                               Add 
                              A list of strings
                            </button>
                          </Button>
                        </div>
                      </ToolbarItem>
                    </div>
                  </ToolbarGroup>
                </div>
              </ActionGroup>
            </ReactFinalFormFieldArray(4.8.1)(1.0.6)>
          </DynamicArray>
        </Field>
        <CheckboxGroup
          key="multipleChoicesList"
          label="A multiple choices list"
          name="multipleChoicesList"
          options={
            Array [
              Object {
                "label": "foo",
                "value": "foo",
              },
              Object {
                "label": "bar",
                "value": "bar",
              },
              Object {
                "label": "fuzz",
                "value": "fuzz",
              },
              Object {
                "label": "qux",
                "value": "qux",
              },
            ]
          }
          title="A multiple choices list"
          type="checkbox"
          validate={
            Array [
              [Function],
            ]
          }
        >
          <FieldInterface
            componentType="checkbox-field"
            label="A multiple choices list"
            name="multipleChoicesList"
            options={
              Array [
                Object {
                  "label": "foo",
                  "value": "foo",
                },
                Object {
                  "label": "bar",
                  "value": "bar",
                },
                Object {
                  "label": "fuzz",
                  "value": "fuzz",
                },
                Object {
                  "label": "qux",
                  "value": "qux",
                },
              ]
            }
            title="A multiple choices list"
            type="checkbox"
            validate={
              Array [
                [Function],
              ]
            }
          >
            <FormConditionWrapper>
              <CheckboxGroupField
                componentType="checkbox-field"
                id="multipleChoicesList"
                label="A multiple choices list"
                name="multipleChoicesList"
                options={
                  Array [
                    Object {
                      "label": "foo",
                      "value": "foo",
                    },
                    Object {
                      "label": "bar",
                      "value": "bar",
                    },
                    Object {
                      "label": "fuzz",
                      "value": "fuzz",
                    },
                    Object {
                      "label": "qux",
                      "value": "qux",
                    },
                  ]
                }
                title="A multiple choices list"
                type="checkbox"
                validate={
                  Array [
                    [Function],
                  ]
                }
              >
                <MultipleChoiceList
                  componentType="checkbox-field"
                  id="multipleChoicesList"
                  label="A multiple choices list"
                  name="multipleChoicesList"
                  options={
                    Array [
                      Object {
                        "label": "foo",
                        "value": "foo",
                      },
                      Object {
                        "label": "bar",
                        "value": "bar",
                      },
                      Object {
                        "label": "fuzz",
                        "value": "fuzz",
                      },
                      Object {
                        "label": "qux",
                        "value": "qux",
                      },
                    ]
                  }
                  title="A multiple choices list"
                  type="checkbox"
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                >
                  <Field
                    componentType="checkbox-field"
                    format={[Function]}
                    id="multipleChoicesList"
                    label="A multiple choices list"
                    name="multipleChoicesList"
                    options={
                      Array [
                        Object {
                          "label": "foo",
                          "value": "foo",
                        },
                        Object {
                          "label": "bar",
                          "value": "bar",
                        },
                        Object {
                          "label": "fuzz",
                          "value": "fuzz",
                        },
                        Object {
                          "label": "qux",
                          "value": "qux",
                        },
                      ]
                    }
                    parse={[Function]}
                    title="A multiple choices list"
                    type="checkbox"
                    validate={[Function]}
                  >
                    <FormGroup
                      className=""
                      fieldId="multipleChoicesList"
                      isInline={false}
                      isRequired={false}
                      isValid={true}
                      label="A multiple choices list"
                    >
                      <div
                        className="pf-c-form__group"
                      >
                        <label
                          className="pf-c-form__label"
                          htmlFor="multipleChoicesList"
                        >
                          A multiple choices list
                        </label>
                        <Field
                          format={[Function]}
                          id="multipleChoicesList-foo"
                          key="foo"
                          label="foo"
                          name="multipleChoicesList"
                          parse={[Function]}
                          render={[Function]}
                          type="checkbox"
                          value="foo"
                        >
                          <Checkbox
                            aria-label="foo"
                            checked={false}
                            className=""
                            id="multipleChoicesList-foo"
                            isDisabled={false}
                            isValid={true}
                            label="foo"
                            name="multipleChoicesList"
                            onBlur={[Function]}
                            onChange={[Function]}
                            onFocus={[Function]}
                            type="checkbox"
                            value="foo"
                          >
                            <div
                              className="pf-c-check"
                            >
                              <input
                                aria-invalid={false}
                                aria-label="foo"
                                checked={false}
                                className="pf-c-check__input"
                                disabled={false}
                                id="multipleChoicesList-foo"
                                name="multipleChoicesList"
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                type="checkbox"
                                value="foo"
                              />
                              <label
                                className="pf-c-check__label"
                                htmlFor="multipleChoicesList-foo"
                              >
                                foo
                              </label>
                            </div>
                          </Checkbox>
                        </Field>
                        <Field
                          format={[Function]}
                          id="multipleChoicesList-bar"
                          key="bar"
                          label="bar"
                          name="multipleChoicesList"
                          parse={[Function]}
                          render={[Function]}
                          type="checkbox"
                          value="bar"
                        >
                          <Checkbox
                            aria-label="bar"
                            checked={false}
                            className=""
                            id="multipleChoicesList-bar"
                            isDisabled={false}
                            isValid={true}
                            label="bar"
                            name="multipleChoicesList"
                            onBlur={[Function]}
                            onChange={[Function]}
                            onFocus={[Function]}
                            type="checkbox"
                            value="bar"
                          >
                            <div
                              className="pf-c-check"
                            >
                              <input
                                aria-invalid={false}
                                aria-label="bar"
                                checked={false}
                                className="pf-c-check__input"
                                disabled={false}
                                id="multipleChoicesList-bar"
                                name="multipleChoicesList"
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                type="checkbox"
                                value="bar"
                              />
                              <label
                                className="pf-c-check__label"
                                htmlFor="multipleChoicesList-bar"
                              >
                                bar
                              </label>
                            </div>
                          </Checkbox>
                        </Field>
                        <Field
                          format={[Function]}
                          id="multipleChoicesList-fuzz"
                          key="fuzz"
                          label="fuzz"
                          name="multipleChoicesList"
                          parse={[Function]}
                          render={[Function]}
                          type="checkbox"
                          value="fuzz"
                        >
                          <Checkbox
                            aria-label="fuzz"
                            checked={false}
                            className=""
                            id="multipleChoicesList-fuzz"
                            isDisabled={false}
                            isValid={true}
                            label="fuzz"
                            name="multipleChoicesList"
                            onBlur={[Function]}
                            onChange={[Function]}
                            onFocus={[Function]}
                            type="checkbox"
                            value="fuzz"
                          >
                            <div
                              className="pf-c-check"
                            >
                              <input
                                aria-invalid={false}
                                aria-label="fuzz"
                                checked={false}
                                className="pf-c-check__input"
                                disabled={false}
                                id="multipleChoicesList-fuzz"
                                name="multipleChoicesList"
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                type="checkbox"
                                value="fuzz"
                              />
                              <label
                                className="pf-c-check__label"
                                htmlFor="multipleChoicesList-fuzz"
                              >
                                fuzz
                              </label>
                            </div>
                          </Checkbox>
                        </Field>
                        <Field
                          format={[Function]}
                          id="multipleChoicesList-qux"
                          key="qux"
                          label="qux"
                          name="multipleChoicesList"
                          parse={[Function]}
                          render={[Function]}
                          type="checkbox"
                          value="qux"
                        >
                          <Checkbox
                            aria-label="qux"
                            checked={false}
                            className=""
                            id="multipleChoicesList-qux"
                            isDisabled={false}
                            isValid={true}
                            label="qux"
                            name="multipleChoicesList"
                            onBlur={[Function]}
                            onChange={[Function]}
                            onFocus={[Function]}
                            type="checkbox"
                            value="qux"
                          >
                            <div
                              className="pf-c-check"
                            >
                              <input
                                aria-invalid={false}
                                aria-label="qux"
                                checked={false}
                                className="pf-c-check__input"
                                disabled={false}
                                id="multipleChoicesList-qux"
                                name="multipleChoicesList"
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                type="checkbox"
                                value="qux"
                              />
                              <label
                                className="pf-c-check__label"
                                htmlFor="multipleChoicesList-qux"
                              >
                                qux
                              </label>
                            </div>
                          </Checkbox>
                        </Field>
                      </div>
                    </FormGroup>
                  </Field>
                </MultipleChoiceList>
              </CheckboxGroupField>
            </FormConditionWrapper>
          </FieldInterface>
        </CheckboxGroup>
        <Field
          format={[Function]}
          key="fixedItemsList"
          name="fixedItemsList"
          parse={[Function]}
          subscription={
            Object {
              "error": true,
              "pristine": true,
            }
          }
        >
          <FixedArrayField
            additionalItems={
              Object {
                "component": "field-array",
                "fields": Array [
                  Object {
                    "autoFocus": false,
                    "component": "text-field",
                    "dataType": "number",
                    "description": undefined,
                    "helperText": undefined,
                    "initialKey": "items",
                    "inline": undefined,
                    "isDisabled": undefined,
                    "isReadOnly": undefined,
                    "label": "Additional item",
                    "name": "fixedItemsList.additionalItems.items",
                    "rows": undefined,
                    "title": "Additional item",
                    "type": "number",
                    "validate": Array [],
                  },
                ],
                "itemDefault": undefined,
                "key": "fixedItemsList.additionalItems",
                "validate": Array [],
              }
            }
            fields={
              Array [
                Object {
                  "component": "textarea-field",
                  "dataType": "string",
                  "default": "lorem ipsum",
                  "label": "A string value",
                  "name": "fixedItemsList.items.0",
                  "options": undefined,
                  "validate": Array [],
                },
                Object {
                  "component": "select-field",
                  "dataType": "boolean",
                  "label": "a boolean value",
                  "name": "fixedItemsList.items.1",
                  "options": Array [
                    Object {
                      "disabled": true,
                      "label": "Please Choose",
                      "value": undefined,
                    },
                    Object {
                      "label": "Yes",
                      "value": true,
                    },
                    Object {
                      "label": "No",
                      "value": false,
                    },
                  ],
                  "validate": Array [],
                },
              ]
            }
            key="fixedItemsList"
            renderForm={[Function]}
            title="A list of fixed items"
          >
            <Title
              className=""
              size="lg"
            >
              <h1
                className="pf-c-title pf-m-lg"
              >
                A list of fixed items
              </h1>
            </Title>
            <TextareaField
              default="lorem ipsum"
              key="fixedItemsList.items.0"
              label="A string value"
              name="fixedItemsList.items.0"
              validate={
                Array [
                  [Function],
                ]
              }
            >
              <FieldInterface
                componentType="textarea-field"
                default="lorem ipsum"
                label="A string value"
                name="fixedItemsList.items.0"
                validate={
                  Array [
                    [Function],
                  ]
                }
              >
                <FormConditionWrapper>
                  <FormGroupWrapper
                    componentType="textarea-field"
                    default="lorem ipsum"
                    id="fixedItemsList.items.0"
                    label="A string value"
                    name="fixedItemsList.items.0"
                    validate={
                      Array [
                        [Function],
                      ]
                    }
                  >
                    <Field
                      component={[Function]}
                      componentType="textarea-field"
                      default="lorem ipsum"
                      format={[Function]}
                      id="fixedItemsList.items.0"
                      label="A string value"
                      name="fixedItemsList.items.0"
                      parse={[Function]}
                      validate={[Function]}
                    >
                      <FinalFormField
                        componentType="textarea-field"
                        default="lorem ipsum"
                        id="fixedItemsList.items.0"
                        input={
                          Object {
                            "name": "fixedItemsList.items.0",
                            "onBlur": [Function],
                            "onChange": [Function],
                            "onFocus": [Function],
                            "value": "",
                          }
                        }
                        isRequired={false}
                        label="A string value"
                        meta={
                          Object {
                            "active": false,
                            "data": Object {},
                            "dirty": false,
                            "dirtySinceLastSubmit": false,
                            "error": undefined,
                            "initial": undefined,
                            "invalid": false,
                            "pristine": true,
                            "submitError": undefined,
                            "submitFailed": false,
                            "submitSucceeded": false,
                            "touched": false,
                            "valid": true,
                            "visited": false,
                          }
                        }
                      >
                        <FormGroup
                          className=""
                          fieldId="fixedItemsList.items.0"
                          isInline={false}
                          isRequired={false}
                          isValid={true}
                          label="A string value"
                        >
                          <div
                            className="pf-c-form__group"
                          >
                            <label
                              className="pf-c-form__label"
                              htmlFor="fixedItemsList.items.0"
                            >
                              A string value
                            </label>
                            <TextArea
                              aria-label={null}
                              className=""
                              default="lorem ipsum"
                              id="fixedItemsList.items.0"
                              isRequired={false}
                              isValid={true}
                              name="fixedItemsList.items.0"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              value=""
                            >
                              <textarea
                                aria-invalid={false}
                                aria-label={null}
                                className="pf-c-form-control"
                                default="lorem ipsum"
                                id="fixedItemsList.items.0"
                                name="fixedItemsList.items.0"
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                required={false}
                                value=""
                              />
                            </TextArea>
                          </div>
                        </FormGroup>
                      </FinalFormField>
                    </Field>
                  </FormGroupWrapper>
                </FormConditionWrapper>
              </FieldInterface>
            </TextareaField>
            <SelectField
              key="fixedItemsList.items.1"
              label="a boolean value"
              name="fixedItemsList.items.1"
              options={
                Array [
                  Object {
                    "disabled": true,
                    "label": "Please Choose",
                    "value": undefined,
                  },
                  Object {
                    "label": "Yes",
                    "value": true,
                  },
                  Object {
                    "label": "No",
                    "value": false,
                  },
                ]
              }
              validate={
                Array [
                  [Function],
                ]
              }
            >
              <FieldInterface
                componentType="select-field"
                label="a boolean value"
                name="fixedItemsList.items.1"
                options={
                  Array [
                    Object {
                      "disabled": true,
                      "label": "Please Choose",
                      "value": undefined,
                    },
                    Object {
                      "label": "Yes",
                      "value": true,
                    },
                    Object {
                      "label": "No",
                      "value": false,
                    },
                  ]
                }
                validate={
                  Array [
                    [Function],
                  ]
                }
              >
                <FormConditionWrapper>
                  <FormGroupWrapper
                    componentType="select-field"
                    id="fixedItemsList.items.1"
                    label="a boolean value"
                    name="fixedItemsList.items.1"
                    options={
                      Array [
                        Object {
                          "disabled": true,
                          "label": "Please Choose",
                          "value": undefined,
                        },
                        Object {
                          "label": "Yes",
                          "value": true,
                        },
                        Object {
                          "label": "No",
                          "value": false,
                        },
                      ]
                    }
                    validate={
                      Array [
                        [Function],
                      ]
                    }
                  >
                    <Field
                      component={[Function]}
                      componentType="select-field"
                      format={[Function]}
                      id="fixedItemsList.items.1"
                      label="a boolean value"
                      name="fixedItemsList.items.1"
                      options={
                        Array [
                          Object {
                            "disabled": true,
                            "label": "Please Choose",
                            "value": undefined,
                          },
                          Object {
                            "label": "Yes",
                            "value": true,
                          },
                          Object {
                            "label": "No",
                            "value": false,
                          },
                        ]
                      }
                      parse={[Function]}
                      validate={[Function]}
                    >
                      <FinalFormField
                        componentType="select-field"
                        id="fixedItemsList.items.1"
                        input={
                          Object {
                            "name": "fixedItemsList.items.1",
                            "onBlur": [Function],
                            "onChange": [Function],
                            "onFocus": [Function],
                            "value": "",
                          }
                        }
                        isRequired={false}
                        label="a boolean value"
                        meta={
                          Object {
                            "active": false,
                            "data": Object {},
                            "dirty": false,
                            "dirtySinceLastSubmit": false,
                            "error": undefined,
                            "initial": undefined,
                            "invalid": false,
                            "pristine": true,
                            "submitError": undefined,
                            "submitFailed": false,
                            "submitSucceeded": false,
                            "touched": false,
                            "valid": true,
                            "visited": false,
                          }
                        }
                        options={
                          Array [
                            Object {
                              "disabled": true,
                              "label": "Please Choose",
                              "value": undefined,
                            },
                            Object {
                              "label": "Yes",
                              "value": true,
                            },
                            Object {
                              "label": "No",
                              "value": false,
                            },
                          ]
                        }
                      >
                        <FormGroup
                          className=""
                          fieldId="fixedItemsList.items.1"
                          isInline={false}
                          isRequired={false}
                          isValid={true}
                          label="a boolean value"
                        >
                          <div
                            className="pf-c-form__group"
                          >
                            <label
                              className="pf-c-form__label"
                              htmlFor="fixedItemsList.items.1"
                            >
                              a boolean value
                            </label>
                            <Select
                              aria-label={null}
                              className=""
                              id="fixedItemsList.items.1"
                              isDisabled={false}
                              isValid={true}
                              name="fixedItemsList.items.1"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              value=""
                            >
                              <select
                                aria-invalid={false}
                                aria-label={null}
                                className="pf-c-form-control"
                                disabled={false}
                                id="fixedItemsList.items.1"
                                name="fixedItemsList.items.1"
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                value=""
                              >
                                <SelectOption
                                  className=""
                                  disabled={true}
                                  isDisabled={false}
                                  key="Please Choose"
                                  label="Please Choose"
                                  value=""
                                >
                                  <option
                                    className=""
                                    disabled={false}
                                    value=""
                                  >
                                    Please Choose
                                  </option>
                                </SelectOption>
                                <SelectOption
                                  className=""
                                  isDisabled={false}
                                  key="true"
                                  label="Yes"
                                  value={true}
                                >
                                  <option
                                    className=""
                                    disabled={false}
                                    value={true}
                                  >
                                    Yes
                                  </option>
                                </SelectOption>
                                <SelectOption
                                  className=""
                                  isDisabled={false}
                                  key="No"
                                  label="No"
                                  value={false}
                                >
                                  <option
                                    className=""
                                    disabled={false}
                                    value={false}
                                  >
                                    No
                                  </option>
                                </SelectOption>
                              </select>
                            </Select>
                          </div>
                        </FormGroup>
                      </FinalFormField>
                    </Field>
                  </FormGroupWrapper>
                </FormConditionWrapper>
              </FieldInterface>
            </SelectField>
            <Field
              format={[Function]}
              key="fixedItemsList.additionalItems"
              name="fixedItemsList.additionalItems"
              parse={[Function]}
              subscription={
                Object {
                  "error": true,
                  "pristine": true,
                }
              }
            >
              <DynamicArray
                fieldKey="fixedItemsList.additionalItems"
                fields={
                  Array [
                    Object {
                      "autoFocus": false,
                      "component": "text-field",
                      "dataType": "number",
                      "description": undefined,
                      "helperText": undefined,
                      "initialKey": "items",
                      "inline": undefined,
                      "isDisabled": undefined,
                      "isReadOnly": undefined,
                      "label": "Additional item",
                      "name": "fixedItemsList.additionalItems.items",
                      "rows": undefined,
                      "title": "Additional item",
                      "type": "number",
                      "validate": Array [],
                    },
                  ]
                }
                renderForm={[Function]}
                validate={[Function]}
              >
                <ReactFinalFormFieldArray(4.8.1)(1.0.6)
                  key="fixedItemsList.additionalItems"
                  name="fixedItemsList.additionalItems"
                  validate={[Function]}
                >
                  <ActionGroup
                    className=""
                  >
                    <div
                      className="pf-c-form__group pf-m-action"
                    >
                      <ToolbarGroup
                        className="pf-u-display-flex pf-u-justify-content-flex-end"
                      >
                        <div
                          className="pf-l-toolbar__group pf-u-display-flex pf-u-justify-content-flex-end"
                        >
                          <ToolbarItem
                            className={null}
                          >
                            <div
                              className="pf-l-toolbar__item"
                            >
                              <Button
                                aria-label={null}
                                className=""
                                component="button"
                                isActive={false}
                                isBlock={false}
                                isDisabled={false}
                                isFocus={false}
                                isHover={false}
                                onClick={[Function]}
                                type="button"
                                variant="link"
                              >
                                <button
                                  aria-disabled={null}
                                  aria-label={null}
                                  className="pf-c-button pf-m-link"
                                  disabled={false}
                                  onClick={[Function]}
                                  tabIndex={null}
                                  type="button"
                                >
                                  <PlusIcon
                                    color="currentColor"
                                    size="sm"
                                    title={null}
                                  >
                                    <svg
                                      aria-hidden={true}
                                      aria-labelledby={null}
                                      fill="currentColor"
                                      height="1em"
                                      role="img"
                                      viewBox="0 0 448 512"
                                      width="1em"
                                    >
                                      <path
                                        d="M416 208H272V64c0-17.67-14.33-32-32-32h-32c-17.67 0-32 14.33-32 32v144H32c-17.67 0-32 14.33-32 32v32c0 17.67 14.33 32 32 32h144v144c0 17.67 14.33 32 32 32h32c17.67 0 32-14.33 32-32V304h144c17.67 0 32-14.33 32-32v-32c0-17.67-14.33-32-32-32z"
                                        transform=""
                                      />
                                    </svg>
                                  </PlusIcon>
                                   Add 
                                </button>
                              </Button>
                            </div>
                          </ToolbarItem>
                        </div>
                      </ToolbarGroup>
                    </div>
                  </ActionGroup>
                </ReactFinalFormFieldArray(4.8.1)(1.0.6)>
              </DynamicArray>
            </Field>
          </FixedArrayField>
        </Field>
        <Field
          format={[Function]}
          key="minItemsList"
          name="minItemsList"
          parse={[Function]}
          subscription={
            Object {
              "error": true,
              "pristine": true,
            }
          }
        >
          <DynamicArray
            fieldKey="minItemsList"
            fields={
              Array [
                Object {
                  "autoFocus": false,
                  "component": "text-field",
                  "dataType": "string",
                  "default": "Default name",
                  "description": undefined,
                  "helperText": undefined,
                  "initialKey": "name",
                  "inline": undefined,
                  "isDisabled": undefined,
                  "isReadOnly": undefined,
                  "label": "name",
                  "name": "minItemsList.name",
                  "rows": undefined,
                  "type": "text",
                  "validate": Array [],
                },
              ]
            }
            itemDefault={
              Object {
                "name": "Default name",
              }
            }
            renderForm={[Function]}
            title="A list with a minimal number of items"
            validate={[Function]}
          >
            <ReactFinalFormFieldArray(4.8.1)(1.0.6)
              key="minItemsList"
              name="minItemsList"
              validate={[Function]}
            >
              <Title
                className=""
                size="lg"
              >
                <h1
                  className="pf-c-title pf-m-lg"
                >
                  A list with a minimal number of items
                </h1>
              </Title>
              <ActionGroup
                className=""
              >
                <div
                  className="pf-c-form__group pf-m-action"
                >
                  <ToolbarGroup
                    className="pf-u-display-flex pf-u-justify-content-flex-end"
                  >
                    <div
                      className="pf-l-toolbar__group pf-u-display-flex pf-u-justify-content-flex-end"
                    >
                      <ToolbarItem
                        className={null}
                      >
                        <div
                          className="pf-l-toolbar__item"
                        >
                          <Button
                            aria-label={null}
                            className=""
                            component="button"
                            isActive={false}
                            isBlock={false}
                            isDisabled={false}
                            isFocus={false}
                            isHover={false}
                            onClick={[Function]}
                            type="button"
                            variant="link"
                          >
                            <button
                              aria-disabled={null}
                              aria-label={null}
                              className="pf-c-button pf-m-link"
                              disabled={false}
                              onClick={[Function]}
                              tabIndex={null}
                              type="button"
                            >
                              <PlusIcon
                                color="currentColor"
                                size="sm"
                                title={null}
                              >
                                <svg
                                  aria-hidden={true}
                                  aria-labelledby={null}
                                  fill="currentColor"
                                  height="1em"
                                  role="img"
                                  viewBox="0 0 448 512"
                                  width="1em"
                                >
                                  <path
                                    d="M416 208H272V64c0-17.67-14.33-32-32-32h-32c-17.67 0-32 14.33-32 32v144H32c-17.67 0-32 14.33-32 32v32c0 17.67 14.33 32 32 32h144v144c0 17.67 14.33 32 32 32h32c17.67 0 32-14.33 32-32V304h144c17.67 0 32-14.33 32-32v-32c0-17.67-14.33-32-32-32z"
                                    transform=""
                                  />
                                </svg>
                              </PlusIcon>
                               Add 
                              A list with a minimal number of items
                            </button>
                          </Button>
                        </div>
                      </ToolbarItem>
                    </div>
                  </ToolbarGroup>
                </div>
              </ActionGroup>
            </ReactFinalFormFieldArray(4.8.1)(1.0.6)>
          </DynamicArray>
        </Field>
        <Field
          format={[Function]}
          key="defaultsAndMinItems"
          name="defaultsAndMinItems"
          parse={[Function]}
          subscription={
            Object {
              "error": true,
              "pristine": true,
            }
          }
        >
          <DynamicArray
            fieldKey="defaultsAndMinItems"
            fields={
              Array [
                Object {
                  "autoFocus": false,
                  "component": "text-field",
                  "dataType": "string",
                  "default": Array [
                    "unidentified",
                  ],
                  "description": undefined,
                  "helperText": undefined,
                  "initialKey": "items",
                  "inline": undefined,
                  "isDisabled": undefined,
                  "isReadOnly": undefined,
                  "label": undefined,
                  "name": "defaultsAndMinItems.items",
                  "rows": undefined,
                  "type": "text",
                  "validate": Array [],
                },
              ]
            }
            itemDefault="unidentified"
            renderForm={[Function]}
            title="List and item level defaults"
            validate={[Function]}
          >
            <ReactFinalFormFieldArray(4.8.1)(1.0.6)
              key="defaultsAndMinItems"
              name="defaultsAndMinItems"
              validate={[Function]}
            >
              <Title
                className=""
                size="lg"
              >
                <h1
                  className="pf-c-title pf-m-lg"
                >
                  List and item level defaults
                </h1>
              </Title>
              <ArrayItem
                fieldIndex={0}
                fieldKey="defaultsAndMinItems"
                fields={
                  Array [
                    Object {
                      "autoFocus": false,
                      "component": "text-field",
                      "dataType": "string",
                      "default": Array [
                        "unidentified",
                      ],
                      "description": undefined,
                      "helperText": undefined,
                      "initialKey": "items",
                      "inline": undefined,
                      "isDisabled": undefined,
                      "isReadOnly": undefined,
                      "label": undefined,
                      "name": "defaultsAndMinItems.items",
                      "rows": undefined,
                      "type": "text",
                      "validate": Array [],
                    },
                  ]
                }
                key="defaultsAndMinItems[0]-0"
                name="defaultsAndMinItems[0]"
                remove={[Function]}
                renderForm={[Function]}
              >
                <Grid
                  className=""
                  gutter={null}
                  lg={null}
                  md={12}
                  sm={10}
                  span={null}
                  xl={null}
                >
                  <div
                    className="pf-l-grid pf-m-all-10-col-on-sm pf-m-all-12-col-on-md"
                  >
                    <GridItem
                      className=""
                      lg={null}
                      lgOffset={null}
                      lgRowSpan={null}
                      md={null}
                      mdOffset={null}
                      mdRowSpan={null}
                      offset={null}
                      rowSpan={null}
                      sm={null}
                      smOffset={null}
                      smRowSpan={null}
                      span={11}
                      xl={null}
                      xlOffset={null}
                      xlRowSpan={null}
                    >
                      <div
                        className="pf-l-grid__item pf-m-11-col"
                      >
                        <TextField
                          autoFocus={false}
                          default={
                            Array [
                              "unidentified",
                            ]
                          }
                          initialKey="items"
                          key="defaultsAndMinItems[0]"
                          name="defaultsAndMinItems[0]"
                          type="text"
                          validate={
                            Array [
                              [Function],
                            ]
                          }
                        >
                          <FieldInterface
                            autoFocus={false}
                            componentType="text-field"
                            default={
                              Array [
                                "unidentified",
                              ]
                            }
                            initialKey="items"
                            name="defaultsAndMinItems[0]"
                            type="text"
                            validate={
                              Array [
                                [Function],
                              ]
                            }
                          >
                            <FormConditionWrapper>
                              <FormGroupWrapper
                                autoFocus={false}
                                componentType="text-field"
                                default={
                                  Array [
                                    "unidentified",
                                  ]
                                }
                                id="defaultsAndMinItems[0]"
                                name="defaultsAndMinItems[0]"
                                type="text"
                                validate={
                                  Array [
                                    [Function],
                                  ]
                                }
                              >
                                <Field
                                  autoFocus={false}
                                  component={[Function]}
                                  componentType="text-field"
                                  default={
                                    Array [
                                      "unidentified",
                                    ]
                                  }
                                  format={[Function]}
                                  id="defaultsAndMinItems[0]"
                                  name="defaultsAndMinItems[0]"
                                  parse={[Function]}
                                  type="text"
                                  validate={[Function]}
                                >
                                  <FinalFormField
                                    autoFocus={false}
                                    componentType="text-field"
                                    default={
                                      Array [
                                        "unidentified",
                                      ]
                                    }
                                    id="defaultsAndMinItems[0]"
                                    input={
                                      Object {
                                        "name": "defaultsAndMinItems[0]",
                                        "onBlur": [Function],
                                        "onChange": [Function],
                                        "onFocus": [Function],
                                        "value": "carp",
                                      }
                                    }
                                    isRequired={false}
                                    meta={
                                      Object {
                                        "active": false,
                                        "data": Object {},
                                        "dirty": false,
                                        "dirtySinceLastSubmit": false,
                                        "error": undefined,
                                        "initial": "carp",
                                        "invalid": false,
                                        "pristine": true,
                                        "submitError": undefined,
                                        "submitFailed": false,
                                        "submitSucceeded": false,
                                        "touched": false,
                                        "valid": true,
                                        "visited": false,
                                      }
                                    }
                                    type="text"
                                  >
                                    <FormGroup
                                      className=""
                                      fieldId="defaultsAndMinItems[0]"
                                      isInline={false}
                                      isRequired={false}
                                      isValid={true}
                                    >
                                      <div
                                        className="pf-c-form__group"
                                      >
                                        <TextInput
                                          aria-label={null}
                                          autoFocus={false}
                                          className=""
                                          default={
                                            Array [
                                              "unidentified",
                                            ]
                                          }
                                          id="defaultsAndMinItems[0]"
                                          isAlt={false}
                                          isDisabled={false}
                                          isReadOnly={false}
                                          isRequired={false}
                                          isValid={true}
                                          name="defaultsAndMinItems[0]"
                                          onBlur={[Function]}
                                          onChange={[Function]}
                                          onFocus={[Function]}
                                          type="text"
                                          value="carp"
                                        >
                                          <input
                                            aria-invalid={false}
                                            aria-label={null}
                                            autoFocus={false}
                                            className="pf-c-form-control"
                                            default={
                                              Array [
                                                "unidentified",
                                              ]
                                            }
                                            disabled={false}
                                            id="defaultsAndMinItems[0]"
                                            name="defaultsAndMinItems[0]"
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            onFocus={[Function]}
                                            readOnly={false}
                                            required={false}
                                            type="text"
                                            value="carp"
                                          />
                                        </TextInput>
                                      </div>
                                    </FormGroup>
                                  </FinalFormField>
                                </Field>
                              </FormGroupWrapper>
                            </FormConditionWrapper>
                          </FieldInterface>
                        </TextField>
                      </div>
                    </GridItem>
                    <GridItem
                      className=""
                      lg={null}
                      lgOffset={null}
                      lgRowSpan={null}
                      md={null}
                      mdOffset={null}
                      mdRowSpan={null}
                      offset={null}
                      rowSpan={null}
                      sm={null}
                      smOffset={null}
                      smRowSpan={null}
                      span={1}
                      xl={null}
                      xlOffset={null}
                      xlRowSpan={null}
                    >
                      <div
                        className="pf-l-grid__item pf-m-1-col"
                      >
                        <Button
                          aria-label={null}
                          className=""
                          component="button"
                          isActive={false}
                          isBlock={false}
                          isDisabled={false}
                          isFocus={false}
                          isHover={false}
                          onClick={[Function]}
                          type="button"
                          variant="danger"
                        >
                          <button
                            aria-disabled={null}
                            aria-label={null}
                            className="pf-c-button pf-m-danger"
                            disabled={false}
                            onClick={[Function]}
                            tabIndex={null}
                            type="button"
                          >
                            <CloseIcon
                              color="currentColor"
                              size="sm"
                              title={null}
                            >
                              <svg
                                aria-hidden={true}
                                aria-labelledby={null}
                                fill="currentColor"
                                height="1em"
                                role="img"
                                viewBox="0 64 731 1024"
                                width="1em"
                              >
                                <path
                                  d="M96.464 804.571c-4.816-0.064-9.12-1.963-12.912-5.733l-77.815-77.815c-3.769-3.794-5.669-8.096-5.735-12.91-0.032-4.839 1.815-9.113 5.543-12.823l616.603-616.606c3.71-3.714 7.986-5.577 12.823-5.541 4.834 0.039 9.138 1.957 12.91 5.73l77.817 77.819c3.769 3.769 5.691 8.066 5.73 12.912 0.037 4.839-1.829 9.106-5.538 12.825l-616.606 616.599c-3.717 3.73-7.986 5.575-12.821 5.541zM622.144 799.031l-616.603-616.601c-3.726-3.717-5.577-7.989-5.536-12.827 0.059-4.843 1.959-9.143 5.728-12.914l77.817-77.817c3.792-3.774 8.096-5.691 12.91-5.728 4.837-0.039 9.106 1.824 12.821 5.536l616.599 616.608c3.717 3.712 5.579 7.989 5.543 12.823-0.041 4.814-1.959 9.118-5.728 12.91l-77.824 77.808c-3.767 3.778-8.073 5.678-12.907 5.744-4.834 0.034-9.104-1.815-12.818-5.541z"
                                  transform="rotate(180 0 512) scale(-1 1)"
                                />
                              </svg>
                            </CloseIcon>
                          </button>
                        </Button>
                      </div>
                    </GridItem>
                  </div>
                </Grid>
              </ArrayItem>
              <ArrayItem
                fieldIndex={1}
                fieldKey="defaultsAndMinItems"
                fields={
                  Array [
                    Object {
                      "autoFocus": false,
                      "component": "text-field",
                      "dataType": "string",
                      "default": Array [
                        "unidentified",
                      ],
                      "description": undefined,
                      "helperText": undefined,
                      "initialKey": "items",
                      "inline": undefined,
                      "isDisabled": undefined,
                      "isReadOnly": undefined,
                      "label": undefined,
                      "name": "defaultsAndMinItems.items",
                      "rows": undefined,
                      "type": "text",
                      "validate": Array [],
                    },
                  ]
                }
                key="defaultsAndMinItems[1]-1"
                name="defaultsAndMinItems[1]"
                remove={[Function]}
                renderForm={[Function]}
              >
                <Grid
                  className=""
                  gutter={null}
                  lg={null}
                  md={12}
                  sm={10}
                  span={null}
                  xl={null}
                >
                  <div
                    className="pf-l-grid pf-m-all-10-col-on-sm pf-m-all-12-col-on-md"
                  >
                    <GridItem
                      className=""
                      lg={null}
                      lgOffset={null}
                      lgRowSpan={null}
                      md={null}
                      mdOffset={null}
                      mdRowSpan={null}
                      offset={null}
                      rowSpan={null}
                      sm={null}
                      smOffset={null}
                      smRowSpan={null}
                      span={11}
                      xl={null}
                      xlOffset={null}
                      xlRowSpan={null}
                    >
                      <div
                        className="pf-l-grid__item pf-m-11-col"
                      >
                        <TextField
                          autoFocus={false}
                          default={
                            Array [
                              "unidentified",
                            ]
                          }
                          initialKey="items"
                          key="defaultsAndMinItems[1]"
                          name="defaultsAndMinItems[1]"
                          type="text"
                          validate={
                            Array [
                              [Function],
                            ]
                          }
                        >
                          <FieldInterface
                            autoFocus={false}
                            componentType="text-field"
                            default={
                              Array [
                                "unidentified",
                              ]
                            }
                            initialKey="items"
                            name="defaultsAndMinItems[1]"
                            type="text"
                            validate={
                              Array [
                                [Function],
                              ]
                            }
                          >
                            <FormConditionWrapper>
                              <FormGroupWrapper
                                autoFocus={false}
                                componentType="text-field"
                                default={
                                  Array [
                                    "unidentified",
                                  ]
                                }
                                id="defaultsAndMinItems[1]"
                                name="defaultsAndMinItems[1]"
                                type="text"
                                validate={
                                  Array [
                                    [Function],
                                  ]
                                }
                              >
                                <Field
                                  autoFocus={false}
                                  component={[Function]}
                                  componentType="text-field"
                                  default={
                                    Array [
                                      "unidentified",
                                    ]
                                  }
                                  format={[Function]}
                                  id="defaultsAndMinItems[1]"
                                  name="defaultsAndMinItems[1]"
                                  parse={[Function]}
                                  type="text"
                                  validate={[Function]}
                                >
                                  <FinalFormField
                                    autoFocus={false}
                                    componentType="text-field"
                                    default={
                                      Array [
                                        "unidentified",
                                      ]
                                    }
                                    id="defaultsAndMinItems[1]"
                                    input={
                                      Object {
                                        "name": "defaultsAndMinItems[1]",
                                        "onBlur": [Function],
                                        "onChange": [Function],
                                        "onFocus": [Function],
                                        "value": "trout",
                                      }
                                    }
                                    isRequired={false}
                                    meta={
                                      Object {
                                        "active": false,
                                        "data": Object {},
                                        "dirty": false,
                                        "dirtySinceLastSubmit": false,
                                        "error": undefined,
                                        "initial": "trout",
                                        "invalid": false,
                                        "pristine": true,
                                        "submitError": undefined,
                                        "submitFailed": false,
                                        "submitSucceeded": false,
                                        "touched": false,
                                        "valid": true,
                                        "visited": false,
                                      }
                                    }
                                    type="text"
                                  >
                                    <FormGroup
                                      className=""
                                      fieldId="defaultsAndMinItems[1]"
                                      isInline={false}
                                      isRequired={false}
                                      isValid={true}
                                    >
                                      <div
                                        className="pf-c-form__group"
                                      >
                                        <TextInput
                                          aria-label={null}
                                          autoFocus={false}
                                          className=""
                                          default={
                                            Array [
                                              "unidentified",
                                            ]
                                          }
                                          id="defaultsAndMinItems[1]"
                                          isAlt={false}
                                          isDisabled={false}
                                          isReadOnly={false}
                                          isRequired={false}
                                          isValid={true}
                                          name="defaultsAndMinItems[1]"
                                          onBlur={[Function]}
                                          onChange={[Function]}
                                          onFocus={[Function]}
                                          type="text"
                                          value="trout"
                                        >
                                          <input
                                            aria-invalid={false}
                                            aria-label={null}
                                            autoFocus={false}
                                            className="pf-c-form-control"
                                            default={
                                              Array [
                                                "unidentified",
                                              ]
                                            }
                                            disabled={false}
                                            id="defaultsAndMinItems[1]"
                                            name="defaultsAndMinItems[1]"
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            onFocus={[Function]}
                                            readOnly={false}
                                            required={false}
                                            type="text"
                                            value="trout"
                                          />
                                        </TextInput>
                                      </div>
                                    </FormGroup>
                                  </FinalFormField>
                                </Field>
                              </FormGroupWrapper>
                            </FormConditionWrapper>
                          </FieldInterface>
                        </TextField>
                      </div>
                    </GridItem>
                    <GridItem
                      className=""
                      lg={null}
                      lgOffset={null}
                      lgRowSpan={null}
                      md={null}
                      mdOffset={null}
                      mdRowSpan={null}
                      offset={null}
                      rowSpan={null}
                      sm={null}
                      smOffset={null}
                      smRowSpan={null}
                      span={1}
                      xl={null}
                      xlOffset={null}
                      xlRowSpan={null}
                    >
                      <div
                        className="pf-l-grid__item pf-m-1-col"
                      >
                        <Button
                          aria-label={null}
                          className=""
                          component="button"
                          isActive={false}
                          isBlock={false}
                          isDisabled={false}
                          isFocus={false}
                          isHover={false}
                          onClick={[Function]}
                          type="button"
                          variant="danger"
                        >
                          <button
                            aria-disabled={null}
                            aria-label={null}
                            className="pf-c-button pf-m-danger"
                            disabled={false}
                            onClick={[Function]}
                            tabIndex={null}
                            type="button"
                          >
                            <CloseIcon
                              color="currentColor"
                              size="sm"
                              title={null}
                            >
                              <svg
                                aria-hidden={true}
                                aria-labelledby={null}
                                fill="currentColor"
                                height="1em"
                                role="img"
                                viewBox="0 64 731 1024"
                                width="1em"
                              >
                                <path
                                  d="M96.464 804.571c-4.816-0.064-9.12-1.963-12.912-5.733l-77.815-77.815c-3.769-3.794-5.669-8.096-5.735-12.91-0.032-4.839 1.815-9.113 5.543-12.823l616.603-616.606c3.71-3.714 7.986-5.577 12.823-5.541 4.834 0.039 9.138 1.957 12.91 5.73l77.817 77.819c3.769 3.769 5.691 8.066 5.73 12.912 0.037 4.839-1.829 9.106-5.538 12.825l-616.606 616.599c-3.717 3.73-7.986 5.575-12.821 5.541zM622.144 799.031l-616.603-616.601c-3.726-3.717-5.577-7.989-5.536-12.827 0.059-4.843 1.959-9.143 5.728-12.914l77.817-77.817c3.792-3.774 8.096-5.691 12.91-5.728 4.837-0.039 9.106 1.824 12.821 5.536l616.599 616.608c3.717 3.712 5.579 7.989 5.543 12.823-0.041 4.814-1.959 9.118-5.728 12.91l-77.824 77.808c-3.767 3.778-8.073 5.678-12.907 5.744-4.834 0.034-9.104-1.815-12.818-5.541z"
                                  transform="rotate(180 0 512) scale(-1 1)"
                                />
                              </svg>
                            </CloseIcon>
                          </button>
                        </Button>
                      </div>
                    </GridItem>
                  </div>
                </Grid>
              </ArrayItem>
              <ArrayItem
                fieldIndex={2}
                fieldKey="defaultsAndMinItems"
                fields={
                  Array [
                    Object {
                      "autoFocus": false,
                      "component": "text-field",
                      "dataType": "string",
                      "default": Array [
                        "unidentified",
                      ],
                      "description": undefined,
                      "helperText": undefined,
                      "initialKey": "items",
                      "inline": undefined,
                      "isDisabled": undefined,
                      "isReadOnly": undefined,
                      "label": undefined,
                      "name": "defaultsAndMinItems.items",
                      "rows": undefined,
                      "type": "text",
                      "validate": Array [],
                    },
                  ]
                }
                key="defaultsAndMinItems[2]-2"
                name="defaultsAndMinItems[2]"
                remove={[Function]}
                renderForm={[Function]}
              >
                <Grid
                  className=""
                  gutter={null}
                  lg={null}
                  md={12}
                  sm={10}
                  span={null}
                  xl={null}
                >
                  <div
                    className="pf-l-grid pf-m-all-10-col-on-sm pf-m-all-12-col-on-md"
                  >
                    <GridItem
                      className=""
                      lg={null}
                      lgOffset={null}
                      lgRowSpan={null}
                      md={null}
                      mdOffset={null}
                      mdRowSpan={null}
                      offset={null}
                      rowSpan={null}
                      sm={null}
                      smOffset={null}
                      smRowSpan={null}
                      span={11}
                      xl={null}
                      xlOffset={null}
                      xlRowSpan={null}
                    >
                      <div
                        className="pf-l-grid__item pf-m-11-col"
                      >
                        <TextField
                          autoFocus={false}
                          default={
                            Array [
                              "unidentified",
                            ]
                          }
                          initialKey="items"
                          key="defaultsAndMinItems[2]"
                          name="defaultsAndMinItems[2]"
                          type="text"
                          validate={
                            Array [
                              [Function],
                            ]
                          }
                        >
                          <FieldInterface
                            autoFocus={false}
                            componentType="text-field"
                            default={
                              Array [
                                "unidentified",
                              ]
                            }
                            initialKey="items"
                            name="defaultsAndMinItems[2]"
                            type="text"
                            validate={
                              Array [
                                [Function],
                              ]
                            }
                          >
                            <FormConditionWrapper>
                              <FormGroupWrapper
                                autoFocus={false}
                                componentType="text-field"
                                default={
                                  Array [
                                    "unidentified",
                                  ]
                                }
                                id="defaultsAndMinItems[2]"
                                name="defaultsAndMinItems[2]"
                                type="text"
                                validate={
                                  Array [
                                    [Function],
                                  ]
                                }
                              >
                                <Field
                                  autoFocus={false}
                                  component={[Function]}
                                  componentType="text-field"
                                  default={
                                    Array [
                                      "unidentified",
                                    ]
                                  }
                                  format={[Function]}
                                  id="defaultsAndMinItems[2]"
                                  name="defaultsAndMinItems[2]"
                                  parse={[Function]}
                                  type="text"
                                  validate={[Function]}
                                >
                                  <FinalFormField
                                    autoFocus={false}
                                    componentType="text-field"
                                    default={
                                      Array [
                                        "unidentified",
                                      ]
                                    }
                                    id="defaultsAndMinItems[2]"
                                    input={
                                      Object {
                                        "name": "defaultsAndMinItems[2]",
                                        "onBlur": [Function],
                                        "onChange": [Function],
                                        "onFocus": [Function],
                                        "value": "bream",
                                      }
                                    }
                                    isRequired={false}
                                    meta={
                                      Object {
                                        "active": false,
                                        "data": Object {},
                                        "dirty": false,
                                        "dirtySinceLastSubmit": false,
                                        "error": undefined,
                                        "initial": "bream",
                                        "invalid": false,
                                        "pristine": true,
                                        "submitError": undefined,
                                        "submitFailed": false,
                                        "submitSucceeded": false,
                                        "touched": false,
                                        "valid": true,
                                        "visited": false,
                                      }
                                    }
                                    type="text"
                                  >
                                    <FormGroup
                                      className=""
                                      fieldId="defaultsAndMinItems[2]"
                                      isInline={false}
                                      isRequired={false}
                                      isValid={true}
                                    >
                                      <div
                                        className="pf-c-form__group"
                                      >
                                        <TextInput
                                          aria-label={null}
                                          autoFocus={false}
                                          className=""
                                          default={
                                            Array [
                                              "unidentified",
                                            ]
                                          }
                                          id="defaultsAndMinItems[2]"
                                          isAlt={false}
                                          isDisabled={false}
                                          isReadOnly={false}
                                          isRequired={false}
                                          isValid={true}
                                          name="defaultsAndMinItems[2]"
                                          onBlur={[Function]}
                                          onChange={[Function]}
                                          onFocus={[Function]}
                                          type="text"
                                          value="bream"
                                        >
                                          <input
                                            aria-invalid={false}
                                            aria-label={null}
                                            autoFocus={false}
                                            className="pf-c-form-control"
                                            default={
                                              Array [
                                                "unidentified",
                                              ]
                                            }
                                            disabled={false}
                                            id="defaultsAndMinItems[2]"
                                            name="defaultsAndMinItems[2]"
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            onFocus={[Function]}
                                            readOnly={false}
                                            required={false}
                                            type="text"
                                            value="bream"
                                          />
                                        </TextInput>
                                      </div>
                                    </FormGroup>
                                  </FinalFormField>
                                </Field>
                              </FormGroupWrapper>
                            </FormConditionWrapper>
                          </FieldInterface>
                        </TextField>
                      </div>
                    </GridItem>
                    <GridItem
                      className=""
                      lg={null}
                      lgOffset={null}
                      lgRowSpan={null}
                      md={null}
                      mdOffset={null}
                      mdRowSpan={null}
                      offset={null}
                      rowSpan={null}
                      sm={null}
                      smOffset={null}
                      smRowSpan={null}
                      span={1}
                      xl={null}
                      xlOffset={null}
                      xlRowSpan={null}
                    >
                      <div
                        className="pf-l-grid__item pf-m-1-col"
                      >
                        <Button
                          aria-label={null}
                          className=""
                          component="button"
                          isActive={false}
                          isBlock={false}
                          isDisabled={false}
                          isFocus={false}
                          isHover={false}
                          onClick={[Function]}
                          type="button"
                          variant="danger"
                        >
                          <button
                            aria-disabled={null}
                            aria-label={null}
                            className="pf-c-button pf-m-danger"
                            disabled={false}
                            onClick={[Function]}
                            tabIndex={null}
                            type="button"
                          >
                            <CloseIcon
                              color="currentColor"
                              size="sm"
                              title={null}
                            >
                              <svg
                                aria-hidden={true}
                                aria-labelledby={null}
                                fill="currentColor"
                                height="1em"
                                role="img"
                                viewBox="0 64 731 1024"
                                width="1em"
                              >
                                <path
                                  d="M96.464 804.571c-4.816-0.064-9.12-1.963-12.912-5.733l-77.815-77.815c-3.769-3.794-5.669-8.096-5.735-12.91-0.032-4.839 1.815-9.113 5.543-12.823l616.603-616.606c3.71-3.714 7.986-5.577 12.823-5.541 4.834 0.039 9.138 1.957 12.91 5.73l77.817 77.819c3.769 3.769 5.691 8.066 5.73 12.912 0.037 4.839-1.829 9.106-5.538 12.825l-616.606 616.599c-3.717 3.73-7.986 5.575-12.821 5.541zM622.144 799.031l-616.603-616.601c-3.726-3.717-5.577-7.989-5.536-12.827 0.059-4.843 1.959-9.143 5.728-12.914l77.817-77.817c3.792-3.774 8.096-5.691 12.91-5.728 4.837-0.039 9.106 1.824 12.821 5.536l616.599 616.608c3.717 3.712 5.579 7.989 5.543 12.823-0.041 4.814-1.959 9.118-5.728 12.91l-77.824 77.808c-3.767 3.778-8.073 5.678-12.907 5.744-4.834 0.034-9.104-1.815-12.818-5.541z"
                                  transform="rotate(180 0 512) scale(-1 1)"
                                />
                              </svg>
                            </CloseIcon>
                          </button>
                        </Button>
                      </div>
                    </GridItem>
                  </div>
                </Grid>
              </ArrayItem>
              <ActionGroup
                className=""
              >
                <div
                  className="pf-c-form__group pf-m-action"
                >
                  <ToolbarGroup
                    className="pf-u-display-flex pf-u-justify-content-flex-end"
                  >
                    <div
                      className="pf-l-toolbar__group pf-u-display-flex pf-u-justify-content-flex-end"
                    >
                      <ToolbarItem
                        className={null}
                      >
                        <div
                          className="pf-l-toolbar__item"
                        >
                          <Button
                            aria-label={null}
                            className=""
                            component="button"
                            isActive={false}
                            isBlock={false}
                            isDisabled={false}
                            isFocus={false}
                            isHover={false}
                            onClick={[Function]}
                            type="button"
                            variant="link"
                          >
                            <button
                              aria-disabled={null}
                              aria-label={null}
                              className="pf-c-button pf-m-link"
                              disabled={false}
                              onClick={[Function]}
                              tabIndex={null}
                              type="button"
                            >
                              <PlusIcon
                                color="currentColor"
                                size="sm"
                                title={null}
                              >
                                <svg
                                  aria-hidden={true}
                                  aria-labelledby={null}
                                  fill="currentColor"
                                  height="1em"
                                  role="img"
                                  viewBox="0 0 448 512"
                                  width="1em"
                                >
                                  <path
                                    d="M416 208H272V64c0-17.67-14.33-32-32-32h-32c-17.67 0-32 14.33-32 32v144H32c-17.67 0-32 14.33-32 32v32c0 17.67 14.33 32 32 32h144v144c0 17.67 14.33 32 32 32h32c17.67 0 32-14.33 32-32V304h144c17.67 0 32-14.33 32-32v-32c0-17.67-14.33-32-32-32z"
                                    transform=""
                                  />
                                </svg>
                              </PlusIcon>
                               Add 
                              List and item level defaults
                            </button>
                          </Button>
                        </div>
                      </ToolbarItem>
                    </div>
                  </ToolbarGroup>
                </div>
              </ActionGroup>
            </ReactFinalFormFieldArray(4.8.1)(1.0.6)>
          </DynamicArray>
        </Field>
        <Field
          format={[Function]}
          key="nestedList"
          name="nestedList"
          parse={[Function]}
          subscription={
            Object {
              "error": true,
              "pristine": true,
            }
          }
        >
          <DynamicArray
            fieldKey="nestedList"
            fields={
              Array [
                Object {
                  "component": "field-array",
                  "fields": Array [
                    Object {
                      "autoFocus": false,
                      "component": "text-field",
                      "dataType": "string",
                      "default": "lorem ipsum",
                      "description": undefined,
                      "helperText": undefined,
                      "initialKey": "items",
                      "inline": undefined,
                      "isDisabled": undefined,
                      "isReadOnly": undefined,
                      "label": undefined,
                      "name": "nestedList.items",
                      "rows": undefined,
                      "type": "text",
                      "validate": Array [],
                    },
                  ],
                  "itemDefault": undefined,
                  "key": "nestedList",
                  "title": "Inner list",
                  "validate": Array [],
                },
              ]
            }
            name="nestedList"
            renderForm={[Function]}
            title="Nested list"
            validate={[Function]}
          >
            <ReactFinalFormFieldArray(4.8.1)(1.0.6)
              key="nestedList"
              name="nestedList"
              validate={[Function]}
            >
              <Title
                className=""
                size="lg"
              >
                <h1
                  className="pf-c-title pf-m-lg"
                >
                  Nested list
                </h1>
              </Title>
              <ArrayItem
                fieldIndex={0}
                fieldKey="nestedList"
                fields={
                  Array [
                    Object {
                      "component": "field-array",
                      "fields": Array [
                        Object {
                          "autoFocus": false,
                          "component": "text-field",
                          "dataType": "string",
                          "default": "lorem ipsum",
                          "description": undefined,
                          "helperText": undefined,
                          "initialKey": "items",
                          "inline": undefined,
                          "isDisabled": undefined,
                          "isReadOnly": undefined,
                          "label": undefined,
                          "name": "nestedList.items",
                          "rows": undefined,
                          "type": "text",
                          "validate": Array [],
                        },
                      ],
                      "itemDefault": undefined,
                      "key": "nestedList",
                      "title": "Inner list",
                      "validate": Array [],
                    },
                  ]
                }
                key="nestedList[0]-0"
                name="nestedList[0]"
                remove={[Function]}
                renderForm={[Function]}
              >
                <Grid
                  className=""
                  gutter={null}
                  lg={null}
                  md={12}
                  sm={10}
                  span={null}
                  xl={null}
                >
                  <div
                    className="pf-l-grid pf-m-all-10-col-on-sm pf-m-all-12-col-on-md"
                  >
                    <GridItem
                      className=""
                      lg={null}
                      lgOffset={null}
                      lgRowSpan={null}
                      md={null}
                      mdOffset={null}
                      mdRowSpan={null}
                      offset={null}
                      rowSpan={null}
                      sm={null}
                      smOffset={null}
                      smRowSpan={null}
                      span={11}
                      xl={null}
                      xlOffset={null}
                      xlRowSpan={null}
                    >
                      <div
                        className="pf-l-grid__item pf-m-11-col"
                      >
                        <Field
                          format={[Function]}
                          key="nestedList[0]"
                          name="nestedList[0]"
                          parse={[Function]}
                          subscription={
                            Object {
                              "error": true,
                              "pristine": true,
                            }
                          }
                        >
                          <DynamicArray
                            fieldKey="nestedList[0]"
                            fields={
                              Array [
                                Object {
                                  "autoFocus": false,
                                  "component": "text-field",
                                  "dataType": "string",
                                  "default": "lorem ipsum",
                                  "description": undefined,
                                  "helperText": undefined,
                                  "initialKey": "items",
                                  "inline": undefined,
                                  "isDisabled": undefined,
                                  "isReadOnly": undefined,
                                  "label": undefined,
                                  "name": "nestedList.items",
                                  "rows": undefined,
                                  "type": "text",
                                  "validate": Array [],
                                },
                              ]
                            }
                            name="nestedList[0]nestedList[0]"
                            renderForm={[Function]}
                            title="Inner list"
                            validate={[Function]}
                          >
                            <ReactFinalFormFieldArray(4.8.1)(1.0.6)
                              key="nestedList[0]"
                              name="nestedList[0]"
                              validate={[Function]}
                            >
                              <Title
                                className=""
                                size="lg"
                              >
                                <h1
                                  className="pf-c-title pf-m-lg"
                                >
                                  Inner list
                                </h1>
                              </Title>
                              <ActionGroup
                                className=""
                              >
                                <div
                                  className="pf-c-form__group pf-m-action"
                                >
                                  <ToolbarGroup
                                    className="pf-u-display-flex pf-u-justify-content-flex-end"
                                  >
                                    <div
                                      className="pf-l-toolbar__group pf-u-display-flex pf-u-justify-content-flex-end"
                                    >
                                      <ToolbarItem
                                        className={null}
                                      >
                                        <div
                                          className="pf-l-toolbar__item"
                                        >
                                          <Button
                                            aria-label={null}
                                            className=""
                                            component="button"
                                            isActive={false}
                                            isBlock={false}
                                            isDisabled={false}
                                            isFocus={false}
                                            isHover={false}
                                            onClick={[Function]}
                                            type="button"
                                            variant="link"
                                          >
                                            <button
                                              aria-disabled={null}
                                              aria-label={null}
                                              className="pf-c-button pf-m-link"
                                              disabled={false}
                                              onClick={[Function]}
                                              tabIndex={null}
                                              type="button"
                                            >
                                              <PlusIcon
                                                color="currentColor"
                                                size="sm"
                                                title={null}
                                              >
                                                <svg
                                                  aria-hidden={true}
                                                  aria-labelledby={null}
                                                  fill="currentColor"
                                                  height="1em"
                                                  role="img"
                                                  viewBox="0 0 448 512"
                                                  width="1em"
                                                >
                                                  <path
                                                    d="M416 208H272V64c0-17.67-14.33-32-32-32h-32c-17.67 0-32 14.33-32 32v144H32c-17.67 0-32 14.33-32 32v32c0 17.67 14.33 32 32 32h144v144c0 17.67 14.33 32 32 32h32c17.67 0 32-14.33 32-32V304h144c17.67 0 32-14.33 32-32v-32c0-17.67-14.33-32-32-32z"
                                                    transform=""
                                                  />
                                                </svg>
                                              </PlusIcon>
                                               Add 
                                              Inner list
                                            </button>
                                          </Button>
                                        </div>
                                      </ToolbarItem>
                                    </div>
                                  </ToolbarGroup>
                                </div>
                              </ActionGroup>
                            </ReactFinalFormFieldArray(4.8.1)(1.0.6)>
                          </DynamicArray>
                        </Field>
                      </div>
                    </GridItem>
                    <GridItem
                      className=""
                      lg={null}
                      lgOffset={null}
                      lgRowSpan={null}
                      md={null}
                      mdOffset={null}
                      mdRowSpan={null}
                      offset={null}
                      rowSpan={null}
                      sm={null}
                      smOffset={null}
                      smRowSpan={null}
                      span={1}
                      xl={null}
                      xlOffset={null}
                      xlRowSpan={null}
                    >
                      <div
                        className="pf-l-grid__item pf-m-1-col"
                      >
                        <Button
                          aria-label={null}
                          className=""
                          component="button"
                          isActive={false}
                          isBlock={false}
                          isDisabled={false}
                          isFocus={false}
                          isHover={false}
                          onClick={[Function]}
                          type="button"
                          variant="danger"
                        >
                          <button
                            aria-disabled={null}
                            aria-label={null}
                            className="pf-c-button pf-m-danger"
                            disabled={false}
                            onClick={[Function]}
                            tabIndex={null}
                            type="button"
                          >
                            <CloseIcon
                              color="currentColor"
                              size="sm"
                              title={null}
                            >
                              <svg
                                aria-hidden={true}
                                aria-labelledby={null}
                                fill="currentColor"
                                height="1em"
                                role="img"
                                viewBox="0 64 731 1024"
                                width="1em"
                              >
                                <path
                                  d="M96.464 804.571c-4.816-0.064-9.12-1.963-12.912-5.733l-77.815-77.815c-3.769-3.794-5.669-8.096-5.735-12.91-0.032-4.839 1.815-9.113 5.543-12.823l616.603-616.606c3.71-3.714 7.986-5.577 12.823-5.541 4.834 0.039 9.138 1.957 12.91 5.73l77.817 77.819c3.769 3.769 5.691 8.066 5.73 12.912 0.037 4.839-1.829 9.106-5.538 12.825l-616.606 616.599c-3.717 3.73-7.986 5.575-12.821 5.541zM622.144 799.031l-616.603-616.601c-3.726-3.717-5.577-7.989-5.536-12.827 0.059-4.843 1.959-9.143 5.728-12.914l77.817-77.817c3.792-3.774 8.096-5.691 12.91-5.728 4.837-0.039 9.106 1.824 12.821 5.536l616.599 616.608c3.717 3.712 5.579 7.989 5.543 12.823-0.041 4.814-1.959 9.118-5.728 12.91l-77.824 77.808c-3.767 3.778-8.073 5.678-12.907 5.744-4.834 0.034-9.104-1.815-12.818-5.541z"
                                  transform="rotate(180 0 512) scale(-1 1)"
                                />
                              </svg>
                            </CloseIcon>
                          </button>
                        </Button>
                      </div>
                    </GridItem>
                  </div>
                </Grid>
              </ArrayItem>
              <ActionGroup
                className=""
              >
                <div
                  className="pf-c-form__group pf-m-action"
                >
                  <ToolbarGroup
                    className="pf-u-display-flex pf-u-justify-content-flex-end"
                  >
                    <div
                      className="pf-l-toolbar__group pf-u-display-flex pf-u-justify-content-flex-end"
                    >
                      <ToolbarItem
                        className={null}
                      >
                        <div
                          className="pf-l-toolbar__item"
                        >
                          <Button
                            aria-label={null}
                            className=""
                            component="button"
                            isActive={false}
                            isBlock={false}
                            isDisabled={false}
                            isFocus={false}
                            isHover={false}
                            onClick={[Function]}
                            type="button"
                            variant="link"
                          >
                            <button
                              aria-disabled={null}
                              aria-label={null}
                              className="pf-c-button pf-m-link"
                              disabled={false}
                              onClick={[Function]}
                              tabIndex={null}
                              type="button"
                            >
                              <PlusIcon
                                color="currentColor"
                                size="sm"
                                title={null}
                              >
                                <svg
                                  aria-hidden={true}
                                  aria-labelledby={null}
                                  fill="currentColor"
                                  height="1em"
                                  role="img"
                                  viewBox="0 0 448 512"
                                  width="1em"
                                >
                                  <path
                                    d="M416 208H272V64c0-17.67-14.33-32-32-32h-32c-17.67 0-32 14.33-32 32v144H32c-17.67 0-32 14.33-32 32v32c0 17.67 14.33 32 32 32h144v144c0 17.67 14.33 32 32 32h32c17.67 0 32-14.33 32-32V304h144c17.67 0 32-14.33 32-32v-32c0-17.67-14.33-32-32-32z"
                                    transform=""
                                  />
                                </svg>
                              </PlusIcon>
                               Add 
                              Nested list
                            </button>
                          </Button>
                        </div>
                      </ToolbarItem>
                    </div>
                  </ToolbarGroup>
                </div>
              </ActionGroup>
            </ReactFinalFormFieldArray(4.8.1)(1.0.6)>
          </DynamicArray>
        </Field>
        <Field
          format={[Function]}
          key="unorderable"
          name="unorderable"
          parse={[Function]}
          subscription={
            Object {
              "error": true,
              "pristine": true,
            }
          }
        >
          <DynamicArray
            fieldKey="unorderable"
            fields={
              Array [
                Object {
                  "autoFocus": false,
                  "component": "text-field",
                  "dataType": "string",
                  "default": Array [
                    "lorem ipsum",
                  ],
                  "description": undefined,
                  "helperText": undefined,
                  "initialKey": "items",
                  "inline": undefined,
                  "isDisabled": undefined,
                  "isReadOnly": undefined,
                  "label": undefined,
                  "name": "unorderable.items",
                  "rows": undefined,
                  "type": "text",
                  "validate": Array [],
                },
              ]
            }
            itemDefault="lorem ipsum"
            renderForm={[Function]}
            title="Unorderable items"
            validate={[Function]}
          >
            <ReactFinalFormFieldArray(4.8.1)(1.0.6)
              key="unorderable"
              name="unorderable"
              validate={[Function]}
            >
              <Title
                className=""
                size="lg"
              >
                <h1
                  className="pf-c-title pf-m-lg"
                >
                  Unorderable items
                </h1>
              </Title>
              <ActionGroup
                className=""
              >
                <div
                  className="pf-c-form__group pf-m-action"
                >
                  <ToolbarGroup
                    className="pf-u-display-flex pf-u-justify-content-flex-end"
                  >
                    <div
                      className="pf-l-toolbar__group pf-u-display-flex pf-u-justify-content-flex-end"
                    >
                      <ToolbarItem
                        className={null}
                      >
                        <div
                          className="pf-l-toolbar__item"
                        >
                          <Button
                            aria-label={null}
                            className=""
                            component="button"
                            isActive={false}
                            isBlock={false}
                            isDisabled={false}
                            isFocus={false}
                            isHover={false}
                            onClick={[Function]}
                            type="button"
                            variant="link"
                          >
                            <button
                              aria-disabled={null}
                              aria-label={null}
                              className="pf-c-button pf-m-link"
                              disabled={false}
                              onClick={[Function]}
                              tabIndex={null}
                              type="button"
                            >
                              <PlusIcon
                                color="currentColor"
                                size="sm"
                                title={null}
                              >
                                <svg
                                  aria-hidden={true}
                                  aria-labelledby={null}
                                  fill="currentColor"
                                  height="1em"
                                  role="img"
                                  viewBox="0 0 448 512"
                                  width="1em"
                                >
                                  <path
                                    d="M416 208H272V64c0-17.67-14.33-32-32-32h-32c-17.67 0-32 14.33-32 32v144H32c-17.67 0-32 14.33-32 32v32c0 17.67 14.33 32 32 32h144v144c0 17.67 14.33 32 32 32h32c17.67 0 32-14.33 32-32V304h144c17.67 0 32-14.33 32-32v-32c0-17.67-14.33-32-32-32z"
                                    transform=""
                                  />
                                </svg>
                              </PlusIcon>
                               Add 
                              Unorderable items
                            </button>
                          </Button>
                        </div>
                      </ToolbarItem>
                    </div>
                  </ToolbarGroup>
                </div>
              </ActionGroup>
            </ReactFinalFormFieldArray(4.8.1)(1.0.6)>
          </DynamicArray>
        </Field>
        <Field
          format={[Function]}
          key="unremovable"
          name="unremovable"
          parse={[Function]}
          subscription={
            Object {
              "error": true,
              "pristine": true,
            }
          }
        >
          <DynamicArray
            fieldKey="unremovable"
            fields={
              Array [
                Object {
                  "autoFocus": false,
                  "component": "text-field",
                  "dataType": "string",
                  "default": Array [
                    "lorem ipsum",
                  ],
                  "description": undefined,
                  "helperText": undefined,
                  "initialKey": "items",
                  "inline": undefined,
                  "isDisabled": undefined,
                  "isReadOnly": undefined,
                  "label": undefined,
                  "name": "unremovable.items",
                  "rows": undefined,
                  "type": "text",
                  "validate": Array [],
                },
              ]
            }
            itemDefault="lorem ipsum"
            renderForm={[Function]}
            title="Unremovable items"
            validate={[Function]}
          >
            <ReactFinalFormFieldArray(4.8.1)(1.0.6)
              key="unremovable"
              name="unremovable"
              validate={[Function]}
            >
              <Title
                className=""
                size="lg"
              >
                <h1
                  className="pf-c-title pf-m-lg"
                >
                  Unremovable items
                </h1>
              </Title>
              <ActionGroup
                className=""
              >
                <div
                  className="pf-c-form__group pf-m-action"
                >
                  <ToolbarGroup
                    className="pf-u-display-flex pf-u-justify-content-flex-end"
                  >
                    <div
                      className="pf-l-toolbar__group pf-u-display-flex pf-u-justify-content-flex-end"
                    >
                      <ToolbarItem
                        className={null}
                      >
                        <div
                          className="pf-l-toolbar__item"
                        >
                          <Button
                            aria-label={null}
                            className=""
                            component="button"
                            isActive={false}
                            isBlock={false}
                            isDisabled={false}
                            isFocus={false}
                            isHover={false}
                            onClick={[Function]}
                            type="button"
                            variant="link"
                          >
                            <button
                              aria-disabled={null}
                              aria-label={null}
                              className="pf-c-button pf-m-link"
                              disabled={false}
                              onClick={[Function]}
                              tabIndex={null}
                              type="button"
                            >
                              <PlusIcon
                                color="currentColor"
                                size="sm"
                                title={null}
                              >
                                <svg
                                  aria-hidden={true}
                                  aria-labelledby={null}
                                  fill="currentColor"
                                  height="1em"
                                  role="img"
                                  viewBox="0 0 448 512"
                                  width="1em"
                                >
                                  <path
                                    d="M416 208H272V64c0-17.67-14.33-32-32-32h-32c-17.67 0-32 14.33-32 32v144H32c-17.67 0-32 14.33-32 32v32c0 17.67 14.33 32 32 32h144v144c0 17.67 14.33 32 32 32h32c17.67 0 32-14.33 32-32V304h144c17.67 0 32-14.33 32-32v-32c0-17.67-14.33-32-32-32z"
                                    transform=""
                                  />
                                </svg>
                              </PlusIcon>
                               Add 
                              Unremovable items
                            </button>
                          </Button>
                        </div>
                      </ToolbarItem>
                    </div>
                  </ToolbarGroup>
                </div>
              </ActionGroup>
            </ReactFinalFormFieldArray(4.8.1)(1.0.6)>
          </DynamicArray>
        </Field>
        <Field
          format={[Function]}
          key="noToolbar"
          name="noToolbar"
          parse={[Function]}
          subscription={
            Object {
              "error": true,
              "pristine": true,
            }
          }
        >
          <DynamicArray
            fieldKey="noToolbar"
            fields={
              Array [
                Object {
                  "autoFocus": false,
                  "component": "text-field",
                  "dataType": "string",
                  "default": Array [
                    "lorem ipsum",
                  ],
                  "description": undefined,
                  "helperText": undefined,
                  "initialKey": "items",
                  "inline": undefined,
                  "isDisabled": undefined,
                  "isReadOnly": undefined,
                  "label": undefined,
                  "name": "noToolbar.items",
                  "rows": undefined,
                  "type": "text",
                  "validate": Array [],
                },
              ]
            }
            itemDefault="lorem ipsum"
            renderForm={[Function]}
            title="No add, remove and order buttons"
            validate={[Function]}
          >
            <ReactFinalFormFieldArray(4.8.1)(1.0.6)
              key="noToolbar"
              name="noToolbar"
              validate={[Function]}
            >
              <Title
                className=""
                size="lg"
              >
                <h1
                  className="pf-c-title pf-m-lg"
                >
                  No add, remove and order buttons
                </h1>
              </Title>
              <ActionGroup
                className=""
              >
                <div
                  className="pf-c-form__group pf-m-action"
                >
                  <ToolbarGroup
                    className="pf-u-display-flex pf-u-justify-content-flex-end"
                  >
                    <div
                      className="pf-l-toolbar__group pf-u-display-flex pf-u-justify-content-flex-end"
                    >
                      <ToolbarItem
                        className={null}
                      >
                        <div
                          className="pf-l-toolbar__item"
                        >
                          <Button
                            aria-label={null}
                            className=""
                            component="button"
                            isActive={false}
                            isBlock={false}
                            isDisabled={false}
                            isFocus={false}
                            isHover={false}
                            onClick={[Function]}
                            type="button"
                            variant="link"
                          >
                            <button
                              aria-disabled={null}
                              aria-label={null}
                              className="pf-c-button pf-m-link"
                              disabled={false}
                              onClick={[Function]}
                              tabIndex={null}
                              type="button"
                            >
                              <PlusIcon
                                color="currentColor"
                                size="sm"
                                title={null}
                              >
                                <svg
                                  aria-hidden={true}
                                  aria-labelledby={null}
                                  fill="currentColor"
                                  height="1em"
                                  role="img"
                                  viewBox="0 0 448 512"
                                  width="1em"
                                >
                                  <path
                                    d="M416 208H272V64c0-17.67-14.33-32-32-32h-32c-17.67 0-32 14.33-32 32v144H32c-17.67 0-32 14.33-32 32v32c0 17.67 14.33 32 32 32h144v144c0 17.67 14.33 32 32 32h32c17.67 0 32-14.33 32-32V304h144c17.67 0 32-14.33 32-32v-32c0-17.67-14.33-32-32-32z"
                                    transform=""
                                  />
                                </svg>
                              </PlusIcon>
                               Add 
                              No add, remove and order buttons
                            </button>
                          </Button>
                        </div>
                      </ToolbarItem>
                    </div>
                  </ToolbarGroup>
                </div>
              </ActionGroup>
            </ReactFinalFormFieldArray(4.8.1)(1.0.6)>
          </DynamicArray>
        </Field>
        <Field
          format={[Function]}
          key="fixedNoToolbar"
          name="fixedNoToolbar"
          parse={[Function]}
          subscription={
            Object {
              "error": true,
              "pristine": true,
            }
          }
        >
          <FixedArrayField
            additionalItems={
              Object {
                "component": "field-array",
                "fields": Array [
                  Object {
                    "autoFocus": false,
                    "component": "text-field",
                    "dataType": "string",
                    "default": "lorem ipsum",
                    "description": undefined,
                    "helperText": undefined,
                    "initialKey": "items",
                    "inline": undefined,
                    "isDisabled": undefined,
                    "isReadOnly": undefined,
                    "label": "A string",
                    "name": "fixedNoToolbar.additionalItems.items",
                    "rows": undefined,
                    "title": "A string",
                    "type": "text",
                    "validate": Array [],
                  },
                ],
                "itemDefault": undefined,
                "key": "fixedNoToolbar.additionalItems",
                "validate": Array [],
              }
            }
            fields={
              Array [
                Object {
                  "component": "text-field",
                  "dataType": "number",
                  "default": 42,
                  "label": "A number",
                  "name": "fixedNoToolbar.items.0",
                  "options": undefined,
                  "type": "number",
                  "validate": Array [],
                },
                Object {
                  "component": "checkbox-field",
                  "dataType": "boolean",
                  "default": false,
                  "label": "A boolean",
                  "name": "fixedNoToolbar.items.1",
                  "options": undefined,
                  "type": "checkbox",
                  "validate": Array [],
                },
              ]
            }
            key="fixedNoToolbar"
            renderForm={[Function]}
            title="Fixed array without buttons"
          >
            <Title
              className=""
              size="lg"
            >
              <h1
                className="pf-c-title pf-m-lg"
              >
                Fixed array without buttons
              </h1>
            </Title>
            <TextField
              default={42}
              key="fixedNoToolbar.items.0"
              label="A number"
              name="fixedNoToolbar.items.0"
              type="number"
              validate={
                Array [
                  [Function],
                ]
              }
            >
              <FieldInterface
                componentType="text-field"
                default={42}
                label="A number"
                name="fixedNoToolbar.items.0"
                type="number"
                validate={
                  Array [
                    [Function],
                  ]
                }
              >
                <FormConditionWrapper>
                  <FormGroupWrapper
                    componentType="text-field"
                    default={42}
                    id="fixedNoToolbar.items.0"
                    label="A number"
                    name="fixedNoToolbar.items.0"
                    type="number"
                    validate={
                      Array [
                        [Function],
                      ]
                    }
                  >
                    <Field
                      component={[Function]}
                      componentType="text-field"
                      default={42}
                      format={[Function]}
                      id="fixedNoToolbar.items.0"
                      label="A number"
                      name="fixedNoToolbar.items.0"
                      parse={[Function]}
                      type="number"
                      validate={[Function]}
                    >
                      <FinalFormField
                        componentType="text-field"
                        default={42}
                        id="fixedNoToolbar.items.0"
                        input={
                          Object {
                            "name": "fixedNoToolbar.items.0",
                            "onBlur": [Function],
                            "onChange": [Function],
                            "onFocus": [Function],
                            "value": "",
                          }
                        }
                        isRequired={false}
                        label="A number"
                        meta={
                          Object {
                            "active": false,
                            "data": Object {},
                            "dirty": false,
                            "dirtySinceLastSubmit": false,
                            "error": undefined,
                            "initial": undefined,
                            "invalid": false,
                            "pristine": true,
                            "submitError": undefined,
                            "submitFailed": false,
                            "submitSucceeded": false,
                            "touched": false,
                            "valid": true,
                            "visited": false,
                          }
                        }
                        type="number"
                      >
                        <FormGroup
                          className=""
                          fieldId="fixedNoToolbar.items.0"
                          isInline={false}
                          isRequired={false}
                          isValid={true}
                          label="A number"
                        >
                          <div
                            className="pf-c-form__group"
                          >
                            <label
                              className="pf-c-form__label"
                              htmlFor="fixedNoToolbar.items.0"
                            >
                              A number
                            </label>
                            <TextInput
                              aria-label={null}
                              className=""
                              default={42}
                              id="fixedNoToolbar.items.0"
                              isAlt={false}
                              isDisabled={false}
                              isReadOnly={false}
                              isRequired={false}
                              isValid={true}
                              name="fixedNoToolbar.items.0"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              type="number"
                              value=""
                            >
                              <input
                                aria-invalid={false}
                                aria-label={null}
                                className="pf-c-form-control"
                                default={42}
                                disabled={false}
                                id="fixedNoToolbar.items.0"
                                name="fixedNoToolbar.items.0"
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                readOnly={false}
                                required={false}
                                type="number"
                                value=""
                              />
                            </TextInput>
                          </div>
                        </FormGroup>
                      </FinalFormField>
                    </Field>
                  </FormGroupWrapper>
                </FormConditionWrapper>
              </FieldInterface>
            </TextField>
            <CheckboxGroup
              default={false}
              key="fixedNoToolbar.items.1"
              label="A boolean"
              name="fixedNoToolbar.items.1"
              type="checkbox"
              validate={
                Array [
                  [Function],
                ]
              }
            >
              <FieldInterface
                componentType="checkbox-field"
                default={false}
                label="A boolean"
                name="fixedNoToolbar.items.1"
                type="checkbox"
                validate={
                  Array [
                    [Function],
                  ]
                }
              >
                <FormConditionWrapper>
                  <CheckboxGroupField
                    componentType="checkbox-field"
                    default={false}
                    id="fixedNoToolbar.items.1"
                    label="A boolean"
                    name="fixedNoToolbar.items.1"
                    type="checkbox"
                    validate={
                      Array [
                        [Function],
                      ]
                    }
                  >
                    <SingleCheckboxField
                      aria-label="A boolean"
                      componentType="checkbox-field"
                      default={false}
                      id="fixedNoToolbar.items.1"
                      label="A boolean"
                      name="fixedNoToolbar.items.1"
                      type="checkbox"
                      validate={
                        Array [
                          [Function],
                        ]
                      }
                    >
                      <Field
                        aria-label="A boolean"
                        componentType="checkbox-field"
                        default={false}
                        format={[Function]}
                        id="fixedNoToolbar.items.1"
                        label="A boolean"
                        name="fixedNoToolbar.items.1"
                        parse={[Function]}
                        render={[Function]}
                        type="checkbox"
                        validate={[Function]}
                      >
                        <Checkbox
                          aria-label="A boolean"
                          checked={false}
                          className=""
                          default={false}
                          id="fixedNoToolbar.items.1"
                          isDisabled={false}
                          isValid={true}
                          label="A boolean"
                          meta={
                            Object {
                              "active": false,
                              "data": Object {},
                              "dirty": false,
                              "dirtySinceLastSubmit": false,
                              "error": undefined,
                              "initial": undefined,
                              "invalid": false,
                              "pristine": true,
                              "submitError": undefined,
                              "submitFailed": false,
                              "submitSucceeded": false,
                              "touched": false,
                              "valid": true,
                              "visited": false,
                            }
                          }
                          name="fixedNoToolbar.items.1"
                          onBlur={[Function]}
                          onChange={[Function]}
                          onFocus={[Function]}
                          type="checkbox"
                          value=""
                        >
                          <div
                            className="pf-c-check"
                          >
                            <input
                              aria-invalid={false}
                              aria-label="A boolean"
                              checked={false}
                              className="pf-c-check__input"
                              default={false}
                              disabled={false}
                              id="fixedNoToolbar.items.1"
                              meta={
                                Object {
                                  "active": false,
                                  "data": Object {},
                                  "dirty": false,
                                  "dirtySinceLastSubmit": false,
                                  "error": undefined,
                                  "initial": undefined,
                                  "invalid": false,
                                  "pristine": true,
                                  "submitError": undefined,
                                  "submitFailed": false,
                                  "submitSucceeded": false,
                                  "touched": false,
                                  "valid": true,
                                  "visited": false,
                                }
                              }
                              name="fixedNoToolbar.items.1"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              type="checkbox"
                              value=""
                            />
                            <label
                              className="pf-c-check__label"
                              htmlFor="fixedNoToolbar.items.1"
                            >
                              A boolean
                            </label>
                          </div>
                        </Checkbox>
                      </Field>
                    </SingleCheckboxField>
                  </CheckboxGroupField>
                </FormConditionWrapper>
              </FieldInterface>
            </CheckboxGroup>
            <Field
              format={[Function]}
              key="fixedNoToolbar.additionalItems"
              name="fixedNoToolbar.additionalItems"
              parse={[Function]}
              subscription={
                Object {
                  "error": true,
                  "pristine": true,
                }
              }
            >
              <DynamicArray
                fieldKey="fixedNoToolbar.additionalItems"
                fields={
                  Array [
                    Object {
                      "autoFocus": false,
                      "component": "text-field",
                      "dataType": "string",
                      "default": "lorem ipsum",
                      "description": undefined,
                      "helperText": undefined,
                      "initialKey": "items",
                      "inline": undefined,
                      "isDisabled": undefined,
                      "isReadOnly": undefined,
                      "label": "A string",
                      "name": "fixedNoToolbar.additionalItems.items",
                      "rows": undefined,
                      "title": "A string",
                      "type": "text",
                      "validate": Array [],
                    },
                  ]
                }
                renderForm={[Function]}
                validate={[Function]}
              >
                <ReactFinalFormFieldArray(4.8.1)(1.0.6)
                  key="fixedNoToolbar.additionalItems"
                  name="fixedNoToolbar.additionalItems"
                  validate={[Function]}
                >
                  <ActionGroup
                    className=""
                  >
                    <div
                      className="pf-c-form__group pf-m-action"
                    >
                      <ToolbarGroup
                        className="pf-u-display-flex pf-u-justify-content-flex-end"
                      >
                        <div
                          className="pf-l-toolbar__group pf-u-display-flex pf-u-justify-content-flex-end"
                        >
                          <ToolbarItem
                            className={null}
                          >
                            <div
                              className="pf-l-toolbar__item"
                            >
                              <Button
                                aria-label={null}
                                className=""
                                component="button"
                                isActive={false}
                                isBlock={false}
                                isDisabled={false}
                                isFocus={false}
                                isHover={false}
                                onClick={[Function]}
                                type="button"
                                variant="link"
                              >
                                <button
                                  aria-disabled={null}
                                  aria-label={null}
                                  className="pf-c-button pf-m-link"
                                  disabled={false}
                                  onClick={[Function]}
                                  tabIndex={null}
                                  type="button"
                                >
                                  <PlusIcon
                                    color="currentColor"
                                    size="sm"
                                    title={null}
                                  >
                                    <svg
                                      aria-hidden={true}
                                      aria-labelledby={null}
                                      fill="currentColor"
                                      height="1em"
                                      role="img"
                                      viewBox="0 0 448 512"
                                      width="1em"
                                    >
                                      <path
                                        d="M416 208H272V64c0-17.67-14.33-32-32-32h-32c-17.67 0-32 14.33-32 32v144H32c-17.67 0-32 14.33-32 32v32c0 17.67 14.33 32 32 32h144v144c0 17.67 14.33 32 32 32h32c17.67 0 32-14.33 32-32V304h144c17.67 0 32-14.33 32-32v-32c0-17.67-14.33-32-32-32z"
                                        transform=""
                                      />
                                    </svg>
                                  </PlusIcon>
                                   Add 
                                </button>
                              </Button>
                            </div>
                          </ToolbarItem>
                        </div>
                      </ToolbarGroup>
                    </div>
                  </ActionGroup>
                </ReactFinalFormFieldArray(4.8.1)(1.0.6)>
              </DynamicArray>
            </Field>
          </FixedArrayField>
        </Field>
        <ActionGroup
          className=""
        >
          <div
            className="pf-c-form__group pf-m-action"
          >
            <ToolbarGroup
              className={null}
            >
              <div
                className="pf-l-toolbar__group"
              >
                <ToolbarItem
                  className={null}
                >
                  <div
                    className="pf-l-toolbar__item"
                  >
                    <Button
                      aria-label={null}
                      className=""
                      component="button"
                      isActive={false}
                      isBlock={false}
                      isDisabled={false}
                      isFocus={false}
                      isHover={false}
                      onClick={[Function]}
                      type="button"
                      variant="primary"
                    >
                      <button
                        aria-disabled={null}
                        aria-label={null}
                        className="pf-c-button pf-m-primary"
                        disabled={false}
                        onClick={[Function]}
                        tabIndex={null}
                        type="button"
                      >
                        Submit
                      </button>
                    </Button>
                  </div>
                </ToolbarItem>
              </div>
            </ToolbarGroup>
          </div>
        </ActionGroup>
      </form>
    </Form>
  </ReactFinalForm>
</FormRenderer>
`;

exports[`Form renderer should render widget schema correctly 1`] = `
<FormRenderer
  onSubmit={[MockFunction]}
  schema={
    Object {
      "properties": Object {
        "boolean": Object {
          "properties": Object {
            "default": Object {
              "description": "This is the checkbox-description",
              "title": "checkbox (default)",
              "type": "boolean",
            },
            "radio": Object {
              "description": "This is the radio-description",
              "title": "radio buttons",
              "type": "boolean",
            },
            "select": Object {
              "description": "This is the select-description",
              "title": "select box",
              "type": "boolean",
            },
          },
          "title": "Boolean field",
          "type": "object",
        },
        "disabled": Object {
          "default": "I am disabled.",
          "title": "A disabled field",
          "type": "string",
        },
        "readonly": Object {
          "default": "I am read-only.",
          "title": "A readonly field",
          "type": "string",
        },
        "secret": Object {
          "default": "I'm a hidden string.",
          "type": "string",
        },
        "selectWidgetOptions": Object {
          "enum": Array [
            "foo",
            "bar",
          ],
          "enumNames": Array [
            "Foo",
            "Bar",
          ],
          "title": "Custom select widget with options",
          "type": "string",
        },
        "string": Object {
          "properties": Object {
            "color": Object {
              "default": "#151ce6",
              "title": "color picker",
              "type": "string",
            },
            "default": Object {
              "title": "text input (default)",
              "type": "string",
            },
            "textarea": Object {
              "title": "textarea",
              "type": "string",
            },
          },
          "title": "String field",
          "type": "object",
        },
        "stringFormats": Object {
          "properties": Object {
            "email": Object {
              "format": "email",
              "type": "string",
            },
            "uri": Object {
              "format": "uri",
              "type": "string",
            },
          },
          "title": "String formats",
          "type": "object",
        },
        "widgetOptions": Object {
          "default": "I am yellow",
          "title": "Custom widget with options",
          "type": "string",
        },
      },
      "title": "Widgets",
      "type": "object",
    }
  }
  uiSchema={
    Object {
      "boolean": Object {
        "radio": Object {
          "ui:widget": "radio",
        },
        "select": Object {
          "ui:widget": "select",
        },
      },
      "disabled": Object {
        "ui:disabled": true,
      },
      "readonly": Object {
        "ui:readonly": true,
      },
      "secret": Object {
        "ui:widget": "hidden",
      },
      "selectWidgetOptions": Object {
        "ui:options": Object {
          "backgroundColor": "pink",
        },
      },
      "string": Object {
        "color": Object {
          "ui:widget": "color",
        },
        "textarea": Object {
          "ui:options": Object {
            "rows": 5,
          },
          "ui:widget": "textarea",
        },
      },
      "widgetOptions": Object {
        "ui:options": Object {
          "backgroundColor": "yellow",
        },
      },
    }
  }
>
  <ReactFinalForm
    initialValues={
      Object {
        "disabled": "I am disabled.",
        "readonly": "I am read-only.",
        "secret": "I'm a hidden string.",
        "string": Object {
          "color": "#151ce6",
        },
        "widgetOptions": "I am yellow",
      }
    }
    mutators={
      Object {
        "insert": [Function],
        "move": [Function],
        "pop": [Function],
        "push": [Function],
        "remove": [Function],
        "shift": [Function],
        "swap": [Function],
        "unshift": [Function],
        "update": [Function],
      }
    }
    onSubmit={[MockFunction]}
    render={[Function]}
    subscription={
      Object {
        "pristine": true,
        "submitting": true,
      }
    }
  >
    <Form
      className=""
      isHorizontal={false}
    >
      <form
        className="pf-c-form"
      >
        <Title
          className=""
          size="lg"
        >
          <h1
            className="pf-c-title pf-m-lg"
          >
            Widgets
          </h1>
        </Title>
        <SubForm
          autoFocus={false}
          fieldKey="stringFormats"
          fields={
            Array [
              Object {
                "autoFocus": false,
                "component": "text-field",
                "dataType": "string",
                "description": undefined,
                "helperText": undefined,
                "initialKey": "email",
                "inline": undefined,
                "isDisabled": undefined,
                "isReadOnly": undefined,
                "label": "email",
                "name": "stringFormats.email",
                "rows": undefined,
                "type": "email",
                "validate": Array [],
              },
              Object {
                "autoFocus": false,
                "component": "text-field",
                "dataType": "string",
                "description": undefined,
                "helperText": undefined,
                "initialKey": "uri",
                "inline": undefined,
                "isDisabled": undefined,
                "isReadOnly": undefined,
                "label": "uri",
                "name": "stringFormats.uri",
                "rows": undefined,
                "type": "uri",
                "validate": Array [],
              },
            ]
          }
          key="stringFormats"
          name="stringFormats"
          renderForm={[Function]}
          title="String formats"
          validate={
            Array [
              undefined,
            ]
          }
        >
          <Title
            className=""
            size="lg"
          >
            <h1
              className="pf-c-title pf-m-lg"
            >
              String formats
            </h1>
          </Title>
          <TextField
            autoFocus={false}
            initialKey="email"
            key="stringFormats.email"
            label="email"
            name="stringFormats.email"
            type="email"
            validate={
              Array [
                [Function],
              ]
            }
          >
            <FieldInterface
              autoFocus={false}
              componentType="text-field"
              initialKey="email"
              label="email"
              name="stringFormats.email"
              type="email"
              validate={
                Array [
                  [Function],
                ]
              }
            >
              <FormConditionWrapper>
                <FormGroupWrapper
                  autoFocus={false}
                  componentType="text-field"
                  id="stringFormats.email"
                  label="email"
                  name="stringFormats.email"
                  type="email"
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                >
                  <Field
                    autoFocus={false}
                    component={[Function]}
                    componentType="text-field"
                    format={[Function]}
                    id="stringFormats.email"
                    label="email"
                    name="stringFormats.email"
                    parse={[Function]}
                    type="email"
                    validate={[Function]}
                  >
                    <FinalFormField
                      autoFocus={false}
                      componentType="text-field"
                      id="stringFormats.email"
                      input={
                        Object {
                          "name": "stringFormats.email",
                          "onBlur": [Function],
                          "onChange": [Function],
                          "onFocus": [Function],
                          "value": "",
                        }
                      }
                      isRequired={false}
                      label="email"
                      meta={
                        Object {
                          "active": false,
                          "data": Object {},
                          "dirty": false,
                          "dirtySinceLastSubmit": false,
                          "error": undefined,
                          "initial": undefined,
                          "invalid": false,
                          "pristine": true,
                          "submitError": undefined,
                          "submitFailed": false,
                          "submitSucceeded": false,
                          "touched": false,
                          "valid": true,
                          "visited": false,
                        }
                      }
                      type="email"
                    >
                      <FormGroup
                        className=""
                        fieldId="stringFormats.email"
                        isInline={false}
                        isRequired={false}
                        isValid={true}
                        label="email"
                      >
                        <div
                          className="pf-c-form__group"
                        >
                          <label
                            className="pf-c-form__label"
                            htmlFor="stringFormats.email"
                          >
                            email
                          </label>
                          <TextInput
                            aria-label={null}
                            autoFocus={false}
                            className=""
                            id="stringFormats.email"
                            isAlt={false}
                            isDisabled={false}
                            isReadOnly={false}
                            isRequired={false}
                            isValid={true}
                            name="stringFormats.email"
                            onBlur={[Function]}
                            onChange={[Function]}
                            onFocus={[Function]}
                            type="email"
                            value=""
                          >
                            <input
                              aria-invalid={false}
                              aria-label={null}
                              autoFocus={false}
                              className="pf-c-form-control"
                              disabled={false}
                              id="stringFormats.email"
                              name="stringFormats.email"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              readOnly={false}
                              required={false}
                              type="email"
                              value=""
                            />
                          </TextInput>
                        </div>
                      </FormGroup>
                    </FinalFormField>
                  </Field>
                </FormGroupWrapper>
              </FormConditionWrapper>
            </FieldInterface>
          </TextField>
          <TextField
            autoFocus={false}
            initialKey="uri"
            key="stringFormats.uri"
            label="uri"
            name="stringFormats.uri"
            type="uri"
            validate={
              Array [
                [Function],
              ]
            }
          >
            <FieldInterface
              autoFocus={false}
              componentType="text-field"
              initialKey="uri"
              label="uri"
              name="stringFormats.uri"
              type="uri"
              validate={
                Array [
                  [Function],
                ]
              }
            >
              <FormConditionWrapper>
                <FormGroupWrapper
                  autoFocus={false}
                  componentType="text-field"
                  id="stringFormats.uri"
                  label="uri"
                  name="stringFormats.uri"
                  type="uri"
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                >
                  <Field
                    autoFocus={false}
                    component={[Function]}
                    componentType="text-field"
                    format={[Function]}
                    id="stringFormats.uri"
                    label="uri"
                    name="stringFormats.uri"
                    parse={[Function]}
                    type="uri"
                    validate={[Function]}
                  >
                    <FinalFormField
                      autoFocus={false}
                      componentType="text-field"
                      id="stringFormats.uri"
                      input={
                        Object {
                          "name": "stringFormats.uri",
                          "onBlur": [Function],
                          "onChange": [Function],
                          "onFocus": [Function],
                          "value": "",
                        }
                      }
                      isRequired={false}
                      label="uri"
                      meta={
                        Object {
                          "active": false,
                          "data": Object {},
                          "dirty": false,
                          "dirtySinceLastSubmit": false,
                          "error": undefined,
                          "initial": undefined,
                          "invalid": false,
                          "pristine": true,
                          "submitError": undefined,
                          "submitFailed": false,
                          "submitSucceeded": false,
                          "touched": false,
                          "valid": true,
                          "visited": false,
                        }
                      }
                      type="uri"
                    >
                      <FormGroup
                        className=""
                        fieldId="stringFormats.uri"
                        isInline={false}
                        isRequired={false}
                        isValid={true}
                        label="uri"
                      >
                        <div
                          className="pf-c-form__group"
                        >
                          <label
                            className="pf-c-form__label"
                            htmlFor="stringFormats.uri"
                          >
                            uri
                          </label>
                          <TextInput
                            aria-label={null}
                            autoFocus={false}
                            className=""
                            id="stringFormats.uri"
                            isAlt={false}
                            isDisabled={false}
                            isReadOnly={false}
                            isRequired={false}
                            isValid={true}
                            name="stringFormats.uri"
                            onBlur={[Function]}
                            onChange={[Function]}
                            onFocus={[Function]}
                            type="uri"
                            value=""
                          >
                            <input
                              aria-invalid={false}
                              aria-label={null}
                              autoFocus={false}
                              className="pf-c-form-control"
                              disabled={false}
                              id="stringFormats.uri"
                              name="stringFormats.uri"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              readOnly={false}
                              required={false}
                              type="uri"
                              value=""
                            />
                          </TextInput>
                        </div>
                      </FormGroup>
                    </FinalFormField>
                  </Field>
                </FormGroupWrapper>
              </FormConditionWrapper>
            </FieldInterface>
          </TextField>
        </SubForm>
        <SubForm
          autoFocus={false}
          fieldKey="boolean"
          fields={
            Array [
              Object {
                "autoFocus": false,
                "component": "checkbox-field",
                "dataType": "boolean",
                "description": "This is the checkbox-description",
                "helperText": undefined,
                "initialKey": "default",
                "inline": undefined,
                "isDisabled": undefined,
                "isReadOnly": undefined,
                "label": "checkbox (default)",
                "name": "boolean.default",
                "rows": undefined,
                "title": "checkbox (default)",
                "type": "checkbox",
                "validate": Array [],
              },
              Object {
                "autoFocus": false,
                "component": "radio-field",
                "dataType": "boolean",
                "description": "This is the radio-description",
                "helperText": undefined,
                "initialKey": "radio",
                "inline": undefined,
                "isDisabled": undefined,
                "isReadOnly": undefined,
                "label": "radio buttons",
                "name": "boolean.radio",
                "options": Array [
                  Object {
                    "label": "Yes",
                    "value": true,
                  },
                  Object {
                    "label": "No",
                    "value": false,
                  },
                ],
                "rows": undefined,
                "title": "radio buttons",
                "type": "radio",
                "validate": Array [],
              },
              Object {
                "autoFocus": false,
                "component": "select-field",
                "dataType": "boolean",
                "description": "This is the select-description",
                "helperText": undefined,
                "initialKey": "select",
                "inline": undefined,
                "isDisabled": undefined,
                "isReadOnly": undefined,
                "label": "select box",
                "name": "boolean.select",
                "options": Array [
                  Object {
                    "disabled": undefined,
                    "label": "Please Choose",
                  },
                  Object {
                    "label": "Yes",
                    "value": true,
                  },
                  Object {
                    "label": "No",
                    "value": false,
                  },
                ],
                "rows": undefined,
                "title": "select box",
                "type": "boolean",
                "validate": Array [],
              },
            ]
          }
          key="boolean"
          name="boolean"
          renderForm={[Function]}
          title="Boolean field"
          validate={
            Array [
              undefined,
            ]
          }
        >
          <Title
            className=""
            size="lg"
          >
            <h1
              className="pf-c-title pf-m-lg"
            >
              Boolean field
            </h1>
          </Title>
          <CheckboxGroup
            autoFocus={false}
            description="This is the checkbox-description"
            initialKey="default"
            key="boolean.default"
            label="checkbox (default)"
            name="boolean.default"
            title="checkbox (default)"
            type="checkbox"
            validate={
              Array [
                [Function],
              ]
            }
          >
            <FieldInterface
              autoFocus={false}
              componentType="checkbox-field"
              description="This is the checkbox-description"
              initialKey="default"
              label="checkbox (default)"
              name="boolean.default"
              title="checkbox (default)"
              type="checkbox"
              validate={
                Array [
                  [Function],
                ]
              }
            >
              <FormConditionWrapper>
                <CheckboxGroupField
                  autoFocus={false}
                  componentType="checkbox-field"
                  description="This is the checkbox-description"
                  id="boolean.default"
                  label="checkbox (default)"
                  name="boolean.default"
                  title="checkbox (default)"
                  type="checkbox"
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                >
                  <SingleCheckboxField
                    aria-label="checkbox (default)"
                    autoFocus={false}
                    componentType="checkbox-field"
                    description="This is the checkbox-description"
                    id="boolean.default"
                    label="checkbox (default)"
                    name="boolean.default"
                    title="checkbox (default)"
                    type="checkbox"
                    validate={
                      Array [
                        [Function],
                      ]
                    }
                  >
                    <Field
                      aria-label="checkbox (default)"
                      autoFocus={false}
                      componentType="checkbox-field"
                      description="This is the checkbox-description"
                      format={[Function]}
                      id="boolean.default"
                      label="checkbox (default)"
                      name="boolean.default"
                      parse={[Function]}
                      render={[Function]}
                      title="checkbox (default)"
                      type="checkbox"
                      validate={[Function]}
                    >
                      <Checkbox
                        aria-label="checkbox (default)"
                        autoFocus={false}
                        checked={false}
                        className=""
                        description="This is the checkbox-description"
                        id="boolean.default"
                        isDisabled={false}
                        isValid={true}
                        label="checkbox (default)"
                        meta={
                          Object {
                            "active": false,
                            "data": Object {},
                            "dirty": false,
                            "dirtySinceLastSubmit": false,
                            "error": undefined,
                            "initial": undefined,
                            "invalid": false,
                            "pristine": true,
                            "submitError": undefined,
                            "submitFailed": false,
                            "submitSucceeded": false,
                            "touched": false,
                            "valid": true,
                            "visited": false,
                          }
                        }
                        name="boolean.default"
                        onBlur={[Function]}
                        onChange={[Function]}
                        onFocus={[Function]}
                        title="checkbox (default)"
                        type="checkbox"
                        value=""
                      >
                        <div
                          className="pf-c-check"
                        >
                          <input
                            aria-invalid={false}
                            aria-label="checkbox (default)"
                            autoFocus={false}
                            checked={false}
                            className="pf-c-check__input"
                            description="This is the checkbox-description"
                            disabled={false}
                            id="boolean.default"
                            meta={
                              Object {
                                "active": false,
                                "data": Object {},
                                "dirty": false,
                                "dirtySinceLastSubmit": false,
                                "error": undefined,
                                "initial": undefined,
                                "invalid": false,
                                "pristine": true,
                                "submitError": undefined,
                                "submitFailed": false,
                                "submitSucceeded": false,
                                "touched": false,
                                "valid": true,
                                "visited": false,
                              }
                            }
                            name="boolean.default"
                            onBlur={[Function]}
                            onChange={[Function]}
                            onFocus={[Function]}
                            title="checkbox (default)"
                            type="checkbox"
                            value=""
                          />
                          <label
                            className="pf-c-check__label"
                            htmlFor="boolean.default"
                          >
                            checkbox (default)
                          </label>
                        </div>
                      </Checkbox>
                    </Field>
                  </SingleCheckboxField>
                </CheckboxGroupField>
              </FormConditionWrapper>
            </FieldInterface>
          </CheckboxGroup>
          <RadioGroup
            autoFocus={false}
            description="This is the radio-description"
            initialKey="radio"
            key="boolean.radio"
            label="radio buttons"
            name="boolean.radio"
            options={
              Array [
                Object {
                  "label": "Yes",
                  "value": true,
                },
                Object {
                  "label": "No",
                  "value": false,
                },
              ]
            }
            title="radio buttons"
            type="radio"
            validate={
              Array [
                [Function],
              ]
            }
          >
            <FieldInterface
              autoFocus={false}
              componentType="radio-field"
              description="This is the radio-description"
              initialKey="radio"
              label="radio buttons"
              name="boolean.radio"
              options={
                Array [
                  Object {
                    "label": "Yes",
                    "value": true,
                  },
                  Object {
                    "label": "No",
                    "value": false,
                  },
                ]
              }
              title="radio buttons"
              type="radio"
              validate={
                Array [
                  [Function],
                ]
              }
            >
              <FormConditionWrapper>
                <SingleChoiceList
                  autoFocus={false}
                  componentType="radio-field"
                  description="This is the radio-description"
                  id="boolean.radio"
                  label="radio buttons"
                  name="boolean.radio"
                  options={
                    Array [
                      Object {
                        "label": "Yes",
                        "value": true,
                      },
                      Object {
                        "label": "No",
                        "value": false,
                      },
                    ]
                  }
                  title="radio buttons"
                  type="radio"
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                >
                  <Field
                    autoFocus={false}
                    componentType="radio-field"
                    description="This is the radio-description"
                    format={[Function]}
                    id="boolean.radio"
                    label="radio buttons"
                    name="boolean.radio"
                    options={
                      Array [
                        Object {
                          "label": "Yes",
                          "value": true,
                        },
                        Object {
                          "label": "No",
                          "value": false,
                        },
                      ]
                    }
                    parse={[Function]}
                    render={[Function]}
                    title="radio buttons"
                    type="radio"
                    validate={[Function]}
                  >
                    <FormGroup
                      className=""
                      fieldId="boolean.radio"
                      isInline={false}
                      isRequired={false}
                      isValid={true}
                      label="radio buttons"
                    >
                      <div
                        className="pf-c-form__group"
                      >
                        <label
                          className="pf-c-form__label"
                          htmlFor="boolean.radio"
                        >
                          radio buttons
                        </label>
                        <Field
                          aria-label="Yes"
                          componentType="radio-field"
                          format={[Function]}
                          id="boolean.radio-true"
                          key="boolean.radio-true"
                          label="Yes"
                          name="boolean.radio"
                          parse={[Function]}
                          render={[Function]}
                          type="radio"
                          value={true}
                        >
                          <Radio
                            aria-label="Yes"
                            checked={false}
                            className=""
                            id="boolean.radio-true"
                            isDisabled={false}
                            isValid={true}
                            label="Yes"
                            meta={
                              Object {
                                "active": false,
                                "data": Object {},
                                "dirty": false,
                                "dirtySinceLastSubmit": false,
                                "error": undefined,
                                "initial": undefined,
                                "invalid": false,
                                "pristine": true,
                                "submitError": undefined,
                                "submitFailed": false,
                                "submitSucceeded": false,
                                "touched": false,
                                "valid": true,
                                "visited": false,
                              }
                            }
                            name="boolean.radio"
                            onBlur={[Function]}
                            onChange={[Function]}
                            onFocus={[Function]}
                            type="radio"
                            value={true}
                          >
                            <div
                              className="pf-c-check"
                            >
                              <input
                                aria-invalid={false}
                                aria-label="Yes"
                                checked={false}
                                className="pf-c-check__input"
                                disabled={false}
                                id="boolean.radio-true"
                                meta={
                                  Object {
                                    "active": false,
                                    "data": Object {},
                                    "dirty": false,
                                    "dirtySinceLastSubmit": false,
                                    "error": undefined,
                                    "initial": undefined,
                                    "invalid": false,
                                    "pristine": true,
                                    "submitError": undefined,
                                    "submitFailed": false,
                                    "submitSucceeded": false,
                                    "touched": false,
                                    "valid": true,
                                    "visited": false,
                                  }
                                }
                                name="boolean.radio"
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                type="radio"
                                value={true}
                              />
                              <label
                                className="pf-c-check__label"
                                htmlFor="boolean.radio-true"
                              >
                                Yes
                              </label>
                            </div>
                          </Radio>
                        </Field>
                        <Field
                          aria-label="No"
                          componentType="radio-field"
                          format={[Function]}
                          id="boolean.radio-false"
                          key="boolean.radio-false"
                          label="No"
                          name="boolean.radio"
                          parse={[Function]}
                          render={[Function]}
                          type="radio"
                          value={false}
                        >
                          <Radio
                            aria-label="No"
                            checked={false}
                            className=""
                            id="boolean.radio-false"
                            isDisabled={false}
                            isValid={true}
                            label="No"
                            meta={
                              Object {
                                "active": false,
                                "data": Object {},
                                "dirty": false,
                                "dirtySinceLastSubmit": false,
                                "error": undefined,
                                "initial": undefined,
                                "invalid": false,
                                "pristine": true,
                                "submitError": undefined,
                                "submitFailed": false,
                                "submitSucceeded": false,
                                "touched": false,
                                "valid": true,
                                "visited": false,
                              }
                            }
                            name="boolean.radio"
                            onBlur={[Function]}
                            onChange={[Function]}
                            onFocus={[Function]}
                            type="radio"
                            value={false}
                          >
                            <div
                              className="pf-c-check"
                            >
                              <input
                                aria-invalid={false}
                                aria-label="No"
                                checked={false}
                                className="pf-c-check__input"
                                disabled={false}
                                id="boolean.radio-false"
                                meta={
                                  Object {
                                    "active": false,
                                    "data": Object {},
                                    "dirty": false,
                                    "dirtySinceLastSubmit": false,
                                    "error": undefined,
                                    "initial": undefined,
                                    "invalid": false,
                                    "pristine": true,
                                    "submitError": undefined,
                                    "submitFailed": false,
                                    "submitSucceeded": false,
                                    "touched": false,
                                    "valid": true,
                                    "visited": false,
                                  }
                                }
                                name="boolean.radio"
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                type="radio"
                                value={false}
                              />
                              <label
                                className="pf-c-check__label"
                                htmlFor="boolean.radio-false"
                              >
                                No
                              </label>
                            </div>
                          </Radio>
                        </Field>
                      </div>
                    </FormGroup>
                  </Field>
                </SingleChoiceList>
              </FormConditionWrapper>
            </FieldInterface>
          </RadioGroup>
          <SelectField
            autoFocus={false}
            description="This is the select-description"
            initialKey="select"
            key="boolean.select"
            label="select box"
            name="boolean.select"
            options={
              Array [
                Object {
                  "disabled": undefined,
                  "label": "Please Choose",
                },
                Object {
                  "label": "Yes",
                  "value": true,
                },
                Object {
                  "label": "No",
                  "value": false,
                },
              ]
            }
            title="select box"
            type="boolean"
            validate={
              Array [
                [Function],
              ]
            }
          >
            <FieldInterface
              autoFocus={false}
              componentType="select-field"
              description="This is the select-description"
              initialKey="select"
              label="select box"
              name="boolean.select"
              options={
                Array [
                  Object {
                    "disabled": undefined,
                    "label": "Please Choose",
                  },
                  Object {
                    "label": "Yes",
                    "value": true,
                  },
                  Object {
                    "label": "No",
                    "value": false,
                  },
                ]
              }
              title="select box"
              type="boolean"
              validate={
                Array [
                  [Function],
                ]
              }
            >
              <FormConditionWrapper>
                <FormGroupWrapper
                  autoFocus={false}
                  componentType="select-field"
                  description="This is the select-description"
                  id="boolean.select"
                  label="select box"
                  name="boolean.select"
                  options={
                    Array [
                      Object {
                        "disabled": undefined,
                        "label": "Please Choose",
                      },
                      Object {
                        "label": "Yes",
                        "value": true,
                      },
                      Object {
                        "label": "No",
                        "value": false,
                      },
                    ]
                  }
                  title="select box"
                  type="boolean"
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                >
                  <Field
                    autoFocus={false}
                    component={[Function]}
                    componentType="select-field"
                    description="This is the select-description"
                    format={[Function]}
                    id="boolean.select"
                    label="select box"
                    name="boolean.select"
                    options={
                      Array [
                        Object {
                          "disabled": undefined,
                          "label": "Please Choose",
                        },
                        Object {
                          "label": "Yes",
                          "value": true,
                        },
                        Object {
                          "label": "No",
                          "value": false,
                        },
                      ]
                    }
                    parse={[Function]}
                    title="select box"
                    type="boolean"
                    validate={[Function]}
                  >
                    <FinalFormField
                      autoFocus={false}
                      componentType="select-field"
                      description="This is the select-description"
                      id="boolean.select"
                      input={
                        Object {
                          "name": "boolean.select",
                          "onBlur": [Function],
                          "onChange": [Function],
                          "onFocus": [Function],
                          "value": "",
                        }
                      }
                      isRequired={false}
                      label="select box"
                      meta={
                        Object {
                          "active": false,
                          "data": Object {},
                          "dirty": false,
                          "dirtySinceLastSubmit": false,
                          "error": undefined,
                          "initial": undefined,
                          "invalid": false,
                          "pristine": true,
                          "submitError": undefined,
                          "submitFailed": false,
                          "submitSucceeded": false,
                          "touched": false,
                          "valid": true,
                          "visited": false,
                        }
                      }
                      options={
                        Array [
                          Object {
                            "disabled": undefined,
                            "label": "Please Choose",
                          },
                          Object {
                            "label": "Yes",
                            "value": true,
                          },
                          Object {
                            "label": "No",
                            "value": false,
                          },
                        ]
                      }
                      title="select box"
                      type="boolean"
                    >
                      <FormGroup
                        className=""
                        fieldId="boolean.select"
                        isInline={false}
                        isRequired={false}
                        isValid={true}
                        label="select box"
                      >
                        <div
                          className="pf-c-form__group"
                        >
                          <label
                            className="pf-c-form__label"
                            htmlFor="boolean.select"
                          >
                            select box
                          </label>
                          <TextContent
                            className=""
                          >
                            <div
                              className="pf-c-content"
                            >
                              <Text
                                className=""
                                component="small"
                              >
                                <small
                                  className=""
                                  data-pf-content={true}
                                >
                                  This is the select-description
                                </small>
                              </Text>
                            </div>
                          </TextContent>
                          <Select
                            aria-label={null}
                            autoFocus={false}
                            className=""
                            id="boolean.select"
                            isDisabled={false}
                            isValid={true}
                            name="boolean.select"
                            onBlur={[Function]}
                            onChange={[Function]}
                            onFocus={[Function]}
                            title="select box"
                            type="boolean"
                            value=""
                          >
                            <select
                              aria-invalid={false}
                              aria-label={null}
                              autoFocus={false}
                              className="pf-c-form-control"
                              disabled={false}
                              id="boolean.select"
                              name="boolean.select"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              title="select box"
                              type="boolean"
                              value=""
                            >
                              <SelectOption
                                className=""
                                isDisabled={false}
                                key="Please Choose"
                                label="Please Choose"
                                value=""
                              >
                                <option
                                  className=""
                                  disabled={false}
                                  value=""
                                >
                                  Please Choose
                                </option>
                              </SelectOption>
                              <SelectOption
                                className=""
                                isDisabled={false}
                                key="true"
                                label="Yes"
                                value={true}
                              >
                                <option
                                  className=""
                                  disabled={false}
                                  value={true}
                                >
                                  Yes
                                </option>
                              </SelectOption>
                              <SelectOption
                                className=""
                                isDisabled={false}
                                key="No"
                                label="No"
                                value={false}
                              >
                                <option
                                  className=""
                                  disabled={false}
                                  value={false}
                                >
                                  No
                                </option>
                              </SelectOption>
                            </select>
                          </Select>
                        </div>
                      </FormGroup>
                    </FinalFormField>
                  </Field>
                </FormGroupWrapper>
              </FormConditionWrapper>
            </FieldInterface>
          </SelectField>
        </SubForm>
        <SubForm
          autoFocus={false}
          fieldKey="string"
          fields={
            Array [
              Object {
                "autoFocus": false,
                "component": "text-field",
                "dataType": "string",
                "description": undefined,
                "helperText": undefined,
                "initialKey": "default",
                "inline": undefined,
                "isDisabled": undefined,
                "isReadOnly": undefined,
                "label": "text input (default)",
                "name": "string.default",
                "rows": undefined,
                "title": "text input (default)",
                "type": "text",
                "validate": Array [],
              },
              Object {
                "autoFocus": false,
                "component": "textarea-field",
                "dataType": "string",
                "description": undefined,
                "helperText": undefined,
                "initialKey": "textarea",
                "inline": undefined,
                "isDisabled": undefined,
                "isReadOnly": undefined,
                "label": "textarea",
                "name": "string.textarea",
                "rows": 5,
                "title": "textarea",
                "type": "string",
                "validate": Array [],
              },
              Object {
                "autoFocus": false,
                "component": "text-field",
                "dataType": "string",
                "default": "#151ce6",
                "description": undefined,
                "helperText": undefined,
                "initialKey": "color",
                "inline": undefined,
                "isDisabled": undefined,
                "isReadOnly": undefined,
                "label": "color picker",
                "name": "string.color",
                "rows": undefined,
                "title": "color picker",
                "type": "color",
                "validate": Array [],
              },
            ]
          }
          key="string"
          name="string"
          renderForm={[Function]}
          title="String field"
          validate={
            Array [
              undefined,
            ]
          }
        >
          <Title
            className=""
            size="lg"
          >
            <h1
              className="pf-c-title pf-m-lg"
            >
              String field
            </h1>
          </Title>
          <TextField
            autoFocus={false}
            initialKey="default"
            key="string.default"
            label="text input (default)"
            name="string.default"
            title="text input (default)"
            type="text"
            validate={
              Array [
                [Function],
              ]
            }
          >
            <FieldInterface
              autoFocus={false}
              componentType="text-field"
              initialKey="default"
              label="text input (default)"
              name="string.default"
              title="text input (default)"
              type="text"
              validate={
                Array [
                  [Function],
                ]
              }
            >
              <FormConditionWrapper>
                <FormGroupWrapper
                  autoFocus={false}
                  componentType="text-field"
                  id="string.default"
                  label="text input (default)"
                  name="string.default"
                  title="text input (default)"
                  type="text"
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                >
                  <Field
                    autoFocus={false}
                    component={[Function]}
                    componentType="text-field"
                    format={[Function]}
                    id="string.default"
                    label="text input (default)"
                    name="string.default"
                    parse={[Function]}
                    title="text input (default)"
                    type="text"
                    validate={[Function]}
                  >
                    <FinalFormField
                      autoFocus={false}
                      componentType="text-field"
                      id="string.default"
                      input={
                        Object {
                          "name": "string.default",
                          "onBlur": [Function],
                          "onChange": [Function],
                          "onFocus": [Function],
                          "value": "",
                        }
                      }
                      isRequired={false}
                      label="text input (default)"
                      meta={
                        Object {
                          "active": false,
                          "data": Object {},
                          "dirty": false,
                          "dirtySinceLastSubmit": false,
                          "error": undefined,
                          "initial": undefined,
                          "invalid": false,
                          "pristine": true,
                          "submitError": undefined,
                          "submitFailed": false,
                          "submitSucceeded": false,
                          "touched": false,
                          "valid": true,
                          "visited": false,
                        }
                      }
                      title="text input (default)"
                      type="text"
                    >
                      <FormGroup
                        className=""
                        fieldId="string.default"
                        isInline={false}
                        isRequired={false}
                        isValid={true}
                        label="text input (default)"
                      >
                        <div
                          className="pf-c-form__group"
                        >
                          <label
                            className="pf-c-form__label"
                            htmlFor="string.default"
                          >
                            text input (default)
                          </label>
                          <TextInput
                            aria-label={null}
                            autoFocus={false}
                            className=""
                            id="string.default"
                            isAlt={false}
                            isDisabled={false}
                            isReadOnly={false}
                            isRequired={false}
                            isValid={true}
                            name="string.default"
                            onBlur={[Function]}
                            onChange={[Function]}
                            onFocus={[Function]}
                            title="text input (default)"
                            type="text"
                            value=""
                          >
                            <input
                              aria-invalid={false}
                              aria-label={null}
                              autoFocus={false}
                              className="pf-c-form-control"
                              disabled={false}
                              id="string.default"
                              name="string.default"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              readOnly={false}
                              required={false}
                              title="text input (default)"
                              type="text"
                              value=""
                            />
                          </TextInput>
                        </div>
                      </FormGroup>
                    </FinalFormField>
                  </Field>
                </FormGroupWrapper>
              </FormConditionWrapper>
            </FieldInterface>
          </TextField>
          <TextareaField
            autoFocus={false}
            initialKey="textarea"
            key="string.textarea"
            label="textarea"
            name="string.textarea"
            rows={5}
            title="textarea"
            type="string"
            validate={
              Array [
                [Function],
              ]
            }
          >
            <FieldInterface
              autoFocus={false}
              componentType="textarea-field"
              initialKey="textarea"
              label="textarea"
              name="string.textarea"
              rows={5}
              title="textarea"
              type="string"
              validate={
                Array [
                  [Function],
                ]
              }
            >
              <FormConditionWrapper>
                <FormGroupWrapper
                  autoFocus={false}
                  componentType="textarea-field"
                  id="string.textarea"
                  label="textarea"
                  name="string.textarea"
                  rows={5}
                  title="textarea"
                  type="string"
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                >
                  <Field
                    autoFocus={false}
                    component={[Function]}
                    componentType="textarea-field"
                    format={[Function]}
                    id="string.textarea"
                    label="textarea"
                    name="string.textarea"
                    parse={[Function]}
                    rows={5}
                    title="textarea"
                    type="string"
                    validate={[Function]}
                  >
                    <FinalFormField
                      autoFocus={false}
                      componentType="textarea-field"
                      id="string.textarea"
                      input={
                        Object {
                          "name": "string.textarea",
                          "onBlur": [Function],
                          "onChange": [Function],
                          "onFocus": [Function],
                          "value": "",
                        }
                      }
                      isRequired={false}
                      label="textarea"
                      meta={
                        Object {
                          "active": false,
                          "data": Object {},
                          "dirty": false,
                          "dirtySinceLastSubmit": false,
                          "error": undefined,
                          "initial": undefined,
                          "invalid": false,
                          "pristine": true,
                          "submitError": undefined,
                          "submitFailed": false,
                          "submitSucceeded": false,
                          "touched": false,
                          "valid": true,
                          "visited": false,
                        }
                      }
                      rows={5}
                      title="textarea"
                      type="string"
                    >
                      <FormGroup
                        className=""
                        fieldId="string.textarea"
                        isInline={false}
                        isRequired={false}
                        isValid={true}
                        label="textarea"
                      >
                        <div
                          className="pf-c-form__group"
                        >
                          <label
                            className="pf-c-form__label"
                            htmlFor="string.textarea"
                          >
                            textarea
                          </label>
                          <TextArea
                            aria-label={null}
                            autoFocus={false}
                            className=""
                            id="string.textarea"
                            isRequired={false}
                            isValid={true}
                            name="string.textarea"
                            onBlur={[Function]}
                            onChange={[Function]}
                            onFocus={[Function]}
                            rows={5}
                            title="textarea"
                            type="string"
                            value=""
                          >
                            <textarea
                              aria-invalid={false}
                              aria-label={null}
                              autoFocus={false}
                              className="pf-c-form-control"
                              id="string.textarea"
                              name="string.textarea"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              required={false}
                              rows={5}
                              title="textarea"
                              type="string"
                              value=""
                            />
                          </TextArea>
                        </div>
                      </FormGroup>
                    </FinalFormField>
                  </Field>
                </FormGroupWrapper>
              </FormConditionWrapper>
            </FieldInterface>
          </TextareaField>
          <TextField
            autoFocus={false}
            default="#151ce6"
            initialKey="color"
            key="string.color"
            label="color picker"
            name="string.color"
            title="color picker"
            type="color"
            validate={
              Array [
                [Function],
              ]
            }
          >
            <FieldInterface
              autoFocus={false}
              componentType="text-field"
              default="#151ce6"
              initialKey="color"
              label="color picker"
              name="string.color"
              title="color picker"
              type="color"
              validate={
                Array [
                  [Function],
                ]
              }
            >
              <FormConditionWrapper>
                <FormGroupWrapper
                  autoFocus={false}
                  componentType="text-field"
                  default="#151ce6"
                  id="string.color"
                  label="color picker"
                  name="string.color"
                  title="color picker"
                  type="color"
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                >
                  <Field
                    autoFocus={false}
                    component={[Function]}
                    componentType="text-field"
                    default="#151ce6"
                    format={[Function]}
                    id="string.color"
                    label="color picker"
                    name="string.color"
                    parse={[Function]}
                    title="color picker"
                    type="color"
                    validate={[Function]}
                  >
                    <FinalFormField
                      autoFocus={false}
                      componentType="text-field"
                      default="#151ce6"
                      id="string.color"
                      input={
                        Object {
                          "name": "string.color",
                          "onBlur": [Function],
                          "onChange": [Function],
                          "onFocus": [Function],
                          "value": "#151ce6",
                        }
                      }
                      isRequired={false}
                      label="color picker"
                      meta={
                        Object {
                          "active": false,
                          "data": Object {},
                          "dirty": false,
                          "dirtySinceLastSubmit": false,
                          "error": undefined,
                          "initial": "#151ce6",
                          "invalid": false,
                          "pristine": true,
                          "submitError": undefined,
                          "submitFailed": false,
                          "submitSucceeded": false,
                          "touched": false,
                          "valid": true,
                          "visited": false,
                        }
                      }
                      title="color picker"
                      type="color"
                    >
                      <FormGroup
                        className=""
                        fieldId="string.color"
                        isInline={false}
                        isRequired={false}
                        isValid={true}
                        label="color picker"
                      >
                        <div
                          className="pf-c-form__group"
                        >
                          <label
                            className="pf-c-form__label"
                            htmlFor="string.color"
                          >
                            color picker
                          </label>
                          <TextInput
                            aria-label={null}
                            autoFocus={false}
                            className=""
                            default="#151ce6"
                            id="string.color"
                            isAlt={false}
                            isDisabled={false}
                            isReadOnly={false}
                            isRequired={false}
                            isValid={true}
                            name="string.color"
                            onBlur={[Function]}
                            onChange={[Function]}
                            onFocus={[Function]}
                            title="color picker"
                            type="color"
                            value="#151ce6"
                          >
                            <input
                              aria-invalid={false}
                              aria-label={null}
                              autoFocus={false}
                              className="pf-c-form-control"
                              default="#151ce6"
                              disabled={false}
                              id="string.color"
                              name="string.color"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              readOnly={false}
                              required={false}
                              title="color picker"
                              type="color"
                              value="#151ce6"
                            />
                          </TextInput>
                        </div>
                      </FormGroup>
                    </FinalFormField>
                  </Field>
                </FormGroupWrapper>
              </FormConditionWrapper>
            </FieldInterface>
          </TextField>
        </SubForm>
        <TextField
          autoFocus={false}
          default="I'm a hidden string."
          key="secret"
          name="secret"
          type="hidden"
        >
          <FieldInterface
            autoFocus={false}
            componentType="text-field"
            default="I'm a hidden string."
            name="secret"
            type="hidden"
          >
            <FormConditionWrapper>
              <FormGroupWrapper
                autoFocus={false}
                componentType="text-field"
                default="I'm a hidden string."
                id="secret"
                name="secret"
                type="hidden"
                validate={
                  Array [
                    undefined,
                  ]
                }
              >
                <Field
                  autoFocus={false}
                  component={[Function]}
                  componentType="text-field"
                  default="I'm a hidden string."
                  format={[Function]}
                  id="secret"
                  name="secret"
                  parse={[Function]}
                  type="hidden"
                  validate={[Function]}
                >
                  <FinalFormField
                    autoFocus={false}
                    componentType="text-field"
                    default="I'm a hidden string."
                    id="secret"
                    input={
                      Object {
                        "name": "secret",
                        "onBlur": [Function],
                        "onChange": [Function],
                        "onFocus": [Function],
                        "value": "I'm a hidden string.",
                      }
                    }
                    isRequired={false}
                    meta={
                      Object {
                        "active": false,
                        "data": Object {},
                        "dirty": false,
                        "dirtySinceLastSubmit": false,
                        "error": undefined,
                        "initial": "I'm a hidden string.",
                        "invalid": false,
                        "pristine": true,
                        "submitError": undefined,
                        "submitFailed": false,
                        "submitSucceeded": false,
                        "touched": false,
                        "valid": true,
                        "visited": false,
                      }
                    }
                    type="hidden"
                  >
                    <FormGroup
                      className=""
                      fieldId="secret"
                      isInline={false}
                      isRequired={false}
                      isValid={true}
                    >
                      <div
                        className="pf-c-form__group"
                      >
                        <TextInput
                          aria-label={null}
                          autoFocus={false}
                          className=""
                          default="I'm a hidden string."
                          id="secret"
                          isAlt={false}
                          isDisabled={false}
                          isReadOnly={false}
                          isRequired={false}
                          isValid={true}
                          name="secret"
                          onBlur={[Function]}
                          onChange={[Function]}
                          onFocus={[Function]}
                          type="hidden"
                          value="I'm a hidden string."
                        >
                          <input
                            aria-invalid={false}
                            aria-label={null}
                            autoFocus={false}
                            className="pf-c-form-control"
                            default="I'm a hidden string."
                            disabled={false}
                            id="secret"
                            name="secret"
                            onBlur={[Function]}
                            onChange={[Function]}
                            onFocus={[Function]}
                            readOnly={false}
                            required={false}
                            type="hidden"
                            value="I'm a hidden string."
                          />
                        </TextInput>
                      </div>
                    </FormGroup>
                  </FinalFormField>
                </Field>
              </FormGroupWrapper>
            </FormConditionWrapper>
          </FieldInterface>
        </TextField>
        <TextField
          autoFocus={false}
          default="I am disabled."
          isDisabled={true}
          key="disabled"
          label="A disabled field"
          name="disabled"
          title="A disabled field"
          type="text"
          validate={
            Array [
              [Function],
            ]
          }
        >
          <FieldInterface
            autoFocus={false}
            componentType="text-field"
            default="I am disabled."
            isDisabled={true}
            label="A disabled field"
            name="disabled"
            title="A disabled field"
            type="text"
            validate={
              Array [
                [Function],
              ]
            }
          >
            <FormConditionWrapper>
              <FormGroupWrapper
                autoFocus={false}
                componentType="text-field"
                default="I am disabled."
                id="disabled"
                isDisabled={true}
                label="A disabled field"
                name="disabled"
                title="A disabled field"
                type="text"
                validate={
                  Array [
                    [Function],
                  ]
                }
              >
                <Field
                  autoFocus={false}
                  component={[Function]}
                  componentType="text-field"
                  default="I am disabled."
                  format={[Function]}
                  id="disabled"
                  isDisabled={true}
                  label="A disabled field"
                  name="disabled"
                  parse={[Function]}
                  title="A disabled field"
                  type="text"
                  validate={[Function]}
                >
                  <FinalFormField
                    autoFocus={false}
                    componentType="text-field"
                    default="I am disabled."
                    id="disabled"
                    input={
                      Object {
                        "name": "disabled",
                        "onBlur": [Function],
                        "onChange": [Function],
                        "onFocus": [Function],
                        "value": "I am disabled.",
                      }
                    }
                    isDisabled={true}
                    isRequired={false}
                    label="A disabled field"
                    meta={
                      Object {
                        "active": false,
                        "data": Object {},
                        "dirty": false,
                        "dirtySinceLastSubmit": false,
                        "error": undefined,
                        "initial": "I am disabled.",
                        "invalid": false,
                        "pristine": true,
                        "submitError": undefined,
                        "submitFailed": false,
                        "submitSucceeded": false,
                        "touched": false,
                        "valid": true,
                        "visited": false,
                      }
                    }
                    title="A disabled field"
                    type="text"
                  >
                    <FormGroup
                      className=""
                      fieldId="disabled"
                      isInline={false}
                      isRequired={false}
                      isValid={true}
                      label="A disabled field"
                    >
                      <div
                        className="pf-c-form__group"
                      >
                        <label
                          className="pf-c-form__label"
                          htmlFor="disabled"
                        >
                          A disabled field
                        </label>
                        <TextInput
                          aria-label={null}
                          autoFocus={false}
                          className=""
                          default="I am disabled."
                          id="disabled"
                          isAlt={false}
                          isDisabled={true}
                          isReadOnly={false}
                          isRequired={false}
                          isValid={true}
                          name="disabled"
                          onBlur={[Function]}
                          onChange={[Function]}
                          onFocus={[Function]}
                          title="A disabled field"
                          type="text"
                          value="I am disabled."
                        >
                          <input
                            aria-invalid={false}
                            aria-label={null}
                            autoFocus={false}
                            className="pf-c-form-control"
                            default="I am disabled."
                            disabled={true}
                            id="disabled"
                            name="disabled"
                            onBlur={[Function]}
                            onChange={[Function]}
                            onFocus={[Function]}
                            readOnly={false}
                            required={false}
                            title="A disabled field"
                            type="text"
                            value="I am disabled."
                          />
                        </TextInput>
                      </div>
                    </FormGroup>
                  </FinalFormField>
                </Field>
              </FormGroupWrapper>
            </FormConditionWrapper>
          </FieldInterface>
        </TextField>
        <TextField
          autoFocus={false}
          default="I am read-only."
          isReadOnly={true}
          key="readonly"
          label="A readonly field"
          name="readonly"
          title="A readonly field"
          type="text"
          validate={
            Array [
              [Function],
            ]
          }
        >
          <FieldInterface
            autoFocus={false}
            componentType="text-field"
            default="I am read-only."
            isReadOnly={true}
            label="A readonly field"
            name="readonly"
            title="A readonly field"
            type="text"
            validate={
              Array [
                [Function],
              ]
            }
          >
            <FormConditionWrapper>
              <FormGroupWrapper
                autoFocus={false}
                componentType="text-field"
                default="I am read-only."
                id="readonly"
                isReadOnly={true}
                label="A readonly field"
                name="readonly"
                title="A readonly field"
                type="text"
                validate={
                  Array [
                    [Function],
                  ]
                }
              >
                <Field
                  autoFocus={false}
                  component={[Function]}
                  componentType="text-field"
                  default="I am read-only."
                  format={[Function]}
                  id="readonly"
                  isReadOnly={true}
                  label="A readonly field"
                  name="readonly"
                  parse={[Function]}
                  title="A readonly field"
                  type="text"
                  validate={[Function]}
                >
                  <FinalFormField
                    autoFocus={false}
                    componentType="text-field"
                    default="I am read-only."
                    id="readonly"
                    input={
                      Object {
                        "name": "readonly",
                        "onBlur": [Function],
                        "onChange": [Function],
                        "onFocus": [Function],
                        "value": "I am read-only.",
                      }
                    }
                    isReadOnly={true}
                    isRequired={false}
                    label="A readonly field"
                    meta={
                      Object {
                        "active": false,
                        "data": Object {},
                        "dirty": false,
                        "dirtySinceLastSubmit": false,
                        "error": undefined,
                        "initial": "I am read-only.",
                        "invalid": false,
                        "pristine": true,
                        "submitError": undefined,
                        "submitFailed": false,
                        "submitSucceeded": false,
                        "touched": false,
                        "valid": true,
                        "visited": false,
                      }
                    }
                    title="A readonly field"
                    type="text"
                  >
                    <FormGroup
                      className=""
                      fieldId="readonly"
                      isInline={false}
                      isRequired={false}
                      isValid={true}
                      label="A readonly field"
                    >
                      <div
                        className="pf-c-form__group"
                      >
                        <label
                          className="pf-c-form__label"
                          htmlFor="readonly"
                        >
                          A readonly field
                        </label>
                        <TextInput
                          aria-label={null}
                          autoFocus={false}
                          className=""
                          default="I am read-only."
                          id="readonly"
                          isAlt={false}
                          isDisabled={false}
                          isReadOnly={true}
                          isRequired={false}
                          isValid={true}
                          name="readonly"
                          onBlur={[Function]}
                          onChange={[Function]}
                          onFocus={[Function]}
                          title="A readonly field"
                          type="text"
                          value="I am read-only."
                        >
                          <input
                            aria-invalid={false}
                            aria-label={null}
                            autoFocus={false}
                            className="pf-c-form-control"
                            default="I am read-only."
                            disabled={false}
                            id="readonly"
                            name="readonly"
                            onBlur={[Function]}
                            onChange={[Function]}
                            onFocus={[Function]}
                            readOnly={true}
                            required={false}
                            title="A readonly field"
                            type="text"
                            value="I am read-only."
                          />
                        </TextInput>
                      </div>
                    </FormGroup>
                  </FinalFormField>
                </Field>
              </FormGroupWrapper>
            </FormConditionWrapper>
          </FieldInterface>
        </TextField>
        <TextField
          autoFocus={false}
          default="I am yellow"
          key="widgetOptions"
          label="Custom widget with options"
          name="widgetOptions"
          title="Custom widget with options"
          type="text"
          validate={
            Array [
              [Function],
            ]
          }
        >
          <FieldInterface
            autoFocus={false}
            componentType="text-field"
            default="I am yellow"
            label="Custom widget with options"
            name="widgetOptions"
            title="Custom widget with options"
            type="text"
            validate={
              Array [
                [Function],
              ]
            }
          >
            <FormConditionWrapper>
              <FormGroupWrapper
                autoFocus={false}
                componentType="text-field"
                default="I am yellow"
                id="widgetOptions"
                label="Custom widget with options"
                name="widgetOptions"
                title="Custom widget with options"
                type="text"
                validate={
                  Array [
                    [Function],
                  ]
                }
              >
                <Field
                  autoFocus={false}
                  component={[Function]}
                  componentType="text-field"
                  default="I am yellow"
                  format={[Function]}
                  id="widgetOptions"
                  label="Custom widget with options"
                  name="widgetOptions"
                  parse={[Function]}
                  title="Custom widget with options"
                  type="text"
                  validate={[Function]}
                >
                  <FinalFormField
                    autoFocus={false}
                    componentType="text-field"
                    default="I am yellow"
                    id="widgetOptions"
                    input={
                      Object {
                        "name": "widgetOptions",
                        "onBlur": [Function],
                        "onChange": [Function],
                        "onFocus": [Function],
                        "value": "I am yellow",
                      }
                    }
                    isRequired={false}
                    label="Custom widget with options"
                    meta={
                      Object {
                        "active": false,
                        "data": Object {},
                        "dirty": false,
                        "dirtySinceLastSubmit": false,
                        "error": undefined,
                        "initial": "I am yellow",
                        "invalid": false,
                        "pristine": true,
                        "submitError": undefined,
                        "submitFailed": false,
                        "submitSucceeded": false,
                        "touched": false,
                        "valid": true,
                        "visited": false,
                      }
                    }
                    title="Custom widget with options"
                    type="text"
                  >
                    <FormGroup
                      className=""
                      fieldId="widgetOptions"
                      isInline={false}
                      isRequired={false}
                      isValid={true}
                      label="Custom widget with options"
                    >
                      <div
                        className="pf-c-form__group"
                      >
                        <label
                          className="pf-c-form__label"
                          htmlFor="widgetOptions"
                        >
                          Custom widget with options
                        </label>
                        <TextInput
                          aria-label={null}
                          autoFocus={false}
                          className=""
                          default="I am yellow"
                          id="widgetOptions"
                          isAlt={false}
                          isDisabled={false}
                          isReadOnly={false}
                          isRequired={false}
                          isValid={true}
                          name="widgetOptions"
                          onBlur={[Function]}
                          onChange={[Function]}
                          onFocus={[Function]}
                          title="Custom widget with options"
                          type="text"
                          value="I am yellow"
                        >
                          <input
                            aria-invalid={false}
                            aria-label={null}
                            autoFocus={false}
                            className="pf-c-form-control"
                            default="I am yellow"
                            disabled={false}
                            id="widgetOptions"
                            name="widgetOptions"
                            onBlur={[Function]}
                            onChange={[Function]}
                            onFocus={[Function]}
                            readOnly={false}
                            required={false}
                            title="Custom widget with options"
                            type="text"
                            value="I am yellow"
                          />
                        </TextInput>
                      </div>
                    </FormGroup>
                  </FinalFormField>
                </Field>
              </FormGroupWrapper>
            </FormConditionWrapper>
          </FieldInterface>
        </TextField>
        <SelectField
          autoFocus={false}
          key="selectWidgetOptions"
          label="Custom select widget with options"
          name="selectWidgetOptions"
          options={
            Array [
              Object {
                "disabled": undefined,
                "label": "Please Choose",
              },
              Object {
                "label": "Foo",
                "value": "foo",
              },
              Object {
                "label": "Bar",
                "value": "bar",
              },
            ]
          }
          title="Custom select widget with options"
          type="string"
          validate={
            Array [
              [Function],
            ]
          }
        >
          <FieldInterface
            autoFocus={false}
            componentType="select-field"
            label="Custom select widget with options"
            name="selectWidgetOptions"
            options={
              Array [
                Object {
                  "disabled": undefined,
                  "label": "Please Choose",
                },
                Object {
                  "label": "Foo",
                  "value": "foo",
                },
                Object {
                  "label": "Bar",
                  "value": "bar",
                },
              ]
            }
            title="Custom select widget with options"
            type="string"
            validate={
              Array [
                [Function],
              ]
            }
          >
            <FormConditionWrapper>
              <FormGroupWrapper
                autoFocus={false}
                componentType="select-field"
                id="selectWidgetOptions"
                label="Custom select widget with options"
                name="selectWidgetOptions"
                options={
                  Array [
                    Object {
                      "disabled": undefined,
                      "label": "Please Choose",
                    },
                    Object {
                      "label": "Foo",
                      "value": "foo",
                    },
                    Object {
                      "label": "Bar",
                      "value": "bar",
                    },
                  ]
                }
                title="Custom select widget with options"
                type="string"
                validate={
                  Array [
                    [Function],
                  ]
                }
              >
                <Field
                  autoFocus={false}
                  component={[Function]}
                  componentType="select-field"
                  format={[Function]}
                  id="selectWidgetOptions"
                  label="Custom select widget with options"
                  name="selectWidgetOptions"
                  options={
                    Array [
                      Object {
                        "disabled": undefined,
                        "label": "Please Choose",
                      },
                      Object {
                        "label": "Foo",
                        "value": "foo",
                      },
                      Object {
                        "label": "Bar",
                        "value": "bar",
                      },
                    ]
                  }
                  parse={[Function]}
                  title="Custom select widget with options"
                  type="string"
                  validate={[Function]}
                >
                  <FinalFormField
                    autoFocus={false}
                    componentType="select-field"
                    id="selectWidgetOptions"
                    input={
                      Object {
                        "name": "selectWidgetOptions",
                        "onBlur": [Function],
                        "onChange": [Function],
                        "onFocus": [Function],
                        "value": "",
                      }
                    }
                    isRequired={false}
                    label="Custom select widget with options"
                    meta={
                      Object {
                        "active": false,
                        "data": Object {},
                        "dirty": false,
                        "dirtySinceLastSubmit": false,
                        "error": undefined,
                        "initial": undefined,
                        "invalid": false,
                        "pristine": true,
                        "submitError": undefined,
                        "submitFailed": false,
                        "submitSucceeded": false,
                        "touched": false,
                        "valid": true,
                        "visited": false,
                      }
                    }
                    options={
                      Array [
                        Object {
                          "disabled": undefined,
                          "label": "Please Choose",
                        },
                        Object {
                          "label": "Foo",
                          "value": "foo",
                        },
                        Object {
                          "label": "Bar",
                          "value": "bar",
                        },
                      ]
                    }
                    title="Custom select widget with options"
                    type="string"
                  >
                    <FormGroup
                      className=""
                      fieldId="selectWidgetOptions"
                      isInline={false}
                      isRequired={false}
                      isValid={true}
                      label="Custom select widget with options"
                    >
                      <div
                        className="pf-c-form__group"
                      >
                        <label
                          className="pf-c-form__label"
                          htmlFor="selectWidgetOptions"
                        >
                          Custom select widget with options
                        </label>
                        <Select
                          aria-label={null}
                          autoFocus={false}
                          className=""
                          id="selectWidgetOptions"
                          isDisabled={false}
                          isValid={true}
                          name="selectWidgetOptions"
                          onBlur={[Function]}
                          onChange={[Function]}
                          onFocus={[Function]}
                          title="Custom select widget with options"
                          type="string"
                          value=""
                        >
                          <select
                            aria-invalid={false}
                            aria-label={null}
                            autoFocus={false}
                            className="pf-c-form-control"
                            disabled={false}
                            id="selectWidgetOptions"
                            name="selectWidgetOptions"
                            onBlur={[Function]}
                            onChange={[Function]}
                            onFocus={[Function]}
                            title="Custom select widget with options"
                            type="string"
                            value=""
                          >
                            <SelectOption
                              className=""
                              isDisabled={false}
                              key="Please Choose"
                              label="Please Choose"
                              value=""
                            >
                              <option
                                className=""
                                disabled={false}
                                value=""
                              >
                                Please Choose
                              </option>
                            </SelectOption>
                            <SelectOption
                              className=""
                              isDisabled={false}
                              key="foo"
                              label="Foo"
                              value="foo"
                            >
                              <option
                                className=""
                                disabled={false}
                                value="foo"
                              >
                                Foo
                              </option>
                            </SelectOption>
                            <SelectOption
                              className=""
                              isDisabled={false}
                              key="bar"
                              label="Bar"
                              value="bar"
                            >
                              <option
                                className=""
                                disabled={false}
                                value="bar"
                              >
                                Bar
                              </option>
                            </SelectOption>
                          </select>
                        </Select>
                      </div>
                    </FormGroup>
                  </FinalFormField>
                </Field>
              </FormGroupWrapper>
            </FormConditionWrapper>
          </FieldInterface>
        </SelectField>
        <ActionGroup
          className=""
        >
          <div
            className="pf-c-form__group pf-m-action"
          >
            <ToolbarGroup
              className={null}
            >
              <div
                className="pf-l-toolbar__group"
              >
                <ToolbarItem
                  className={null}
                >
                  <div
                    className="pf-l-toolbar__item"
                  >
                    <Button
                      aria-label={null}
                      className=""
                      component="button"
                      isActive={false}
                      isBlock={false}
                      isDisabled={false}
                      isFocus={false}
                      isHover={false}
                      onClick={[Function]}
                      type="button"
                      variant="primary"
                    >
                      <button
                        aria-disabled={null}
                        aria-label={null}
                        className="pf-c-button pf-m-primary"
                        disabled={false}
                        onClick={[Function]}
                        tabIndex={null}
                        type="button"
                      >
                        Submit
                      </button>
                    </Button>
                  </div>
                </ToolbarItem>
              </div>
            </ToolbarGroup>
          </div>
        </ActionGroup>
      </form>
    </Form>
  </ReactFinalForm>
</FormRenderer>
`;
